{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/date-fns/formatISO9075.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nexport function formatISO9075(date, options) {\n  const _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(_date.getDate(), 2);\n    const month = addLeadingZeros(_date.getMonth() + 1, 2);\n    const year = addLeadingZeros(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    const hour = addLeadingZeros(_date.getHours(), 2);\n    const minute = addLeadingZeros(_date.getMinutes(), 2);\n    const second = addLeadingZeros(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with a space\n    const separator = result === \"\" ? \"\" : \" \";\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO9075;\n",
      "start": 1717261248796,
      "end": 1717261248845,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261248845,
      "end": 1717261248845,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261248846,
      "end": 1717261248846,
      "order": "normal"
    }
  ]
}
