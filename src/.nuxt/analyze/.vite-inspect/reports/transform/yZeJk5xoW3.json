{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/date-fns/lightFormat.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { lightFormatters } from \"./_lib/format/lightFormatters.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { lightFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @private\n */\n\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 001, ..., 999                |\n * |                                 | SSSS    | ...                               |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n *\n * @returns The formatted date string\n *\n * @throws `Invalid time value` if the date is invalid\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\nexport function lightFormat(date, formatStr) {\n  const _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const tokens = formatStr.match(formattingTokensRegExp);\n\n  // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n  if (!tokens) return \"\";\n\n  const result = tokens\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n\n      const formatter = lightFormatters[firstCharacter];\n      if (formatter) {\n        return formatter(_date, substring);\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return substring;\n    })\n    .join(\"\");\n\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  const matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default lightFormat;\n",
      "start": 1717261249006,
      "end": 1717261249043,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261249043,
      "end": 1717261249043,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261249043,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261249044,
      "end": 1717261249044,
      "order": "normal"
    }
  ]
}
