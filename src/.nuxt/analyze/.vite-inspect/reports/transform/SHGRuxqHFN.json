{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/date-fns/set.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { constructFrom } from \"./constructFrom.mjs\";\nimport { setMonth } from \"./setMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport function set(date, values) {\n  let _date = toDate(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return constructFrom(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = setMonth(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default set;\n",
      "start": 1717261249086,
      "end": 1717261249132,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261249132,
      "end": 1717261249132,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261249132,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261249133,
      "end": 1717261249133,
      "order": "normal"
    }
  ]
}
