{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/date-fns/formatRFC3339.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { addLeadingZeros } from \"./_lib/addLeadingZeros.mjs\";\n\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nexport function formatRFC3339(date, options) {\n  const _date = toDate(date);\n\n  if (!isValid(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n\n  const day = addLeadingZeros(_date.getDate(), 2);\n  const month = addLeadingZeros(_date.getMonth() + 1, 2);\n  const year = _date.getFullYear();\n\n  const hour = addLeadingZeros(_date.getHours(), 2);\n  const minute = addLeadingZeros(_date.getMinutes(), 2);\n  const second = addLeadingZeros(_date.getSeconds(), 2);\n\n  let fractionalSecond = \"\";\n  if (fractionDigits > 0) {\n    const milliseconds = _date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, fractionDigits - 3),\n    );\n    fractionalSecond = \".\" + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n  const tzOffset = _date.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n    const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n    // If less than 0, the sign is +, because it is ahead of time.\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}\n\n// Fallback for modularized imports:\nexport default formatRFC3339;\n",
      "start": 1717261248800,
      "end": 1717261248849,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261248849,
      "end": 1717261248849,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261248849,
      "end": 1717261248849,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261248849,
      "end": 1717261248849,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261248849,
      "end": 1717261248849,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261248849,
      "end": 1717261248849,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261248849,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261248850,
      "end": 1717261248850,
      "order": "normal"
    }
  ]
}
