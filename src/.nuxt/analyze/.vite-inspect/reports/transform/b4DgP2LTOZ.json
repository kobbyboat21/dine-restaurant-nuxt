{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/forms/SelectMenu.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <component\n    :is=\"searchable ? 'HCombobox' : 'HListbox'\"\n    v-slot=\"{ open }\"\n    :by=\"by\"\n    :name=\"name\"\n    :model-value=\"modelValue\"\n    :multiple=\"multiple\"\n    :disabled=\"disabled\"\n    as=\"div\"\n    :class=\"ui.wrapper\"\n    @update:model-value=\"onUpdate\"\n  >\n    <input\n      v-if=\"required\"\n      :value=\"modelValue\"\n      :required=\"required\"\n      :class=\"uiMenu.required\"\n      tabindex=\"-1\"\n      aria-hidden=\"true\"\n    >\n\n    <component\n      :is=\"searchable ? 'HComboboxButton' : 'HListboxButton'\"\n      ref=\"trigger\"\n      as=\"div\"\n      role=\"button\"\n      :class=\"uiMenu.trigger\"\n    >\n      <slot :open=\"open\" :disabled=\"disabled\" :loading=\"loading\">\n        <button :id=\"inputId\" :class=\"selectClass\" :disabled=\"disabled\" type=\"button\" v-bind=\"attrs\">\n          <span v-if=\"(isLeading && leadingIconName) || $slots.leading\" :class=\"leadingWrapperIconClass\">\n            <slot name=\"leading\" :disabled=\"disabled\" :loading=\"loading\">\n              <UIcon :name=\"leadingIconName\" :class=\"leadingIconClass\" />\n            </slot>\n          </span>\n\n          <slot name=\"label\">\n            <span v-if=\"multiple && Array.isArray(modelValue) && modelValue.length\" :class=\"uiMenu.label\">{{ modelValue.length }} selected</span>\n            <span v-else-if=\"!multiple && modelValue\" :class=\"uiMenu.label\">{{ ['string', 'number'].includes(typeof modelValue) ? modelValue : modelValue[optionAttribute] }}</span>\n            <span v-else :class=\"uiMenu.label\">{{ placeholder || '&nbsp;' }}</span>\n          </slot>\n\n          <span v-if=\"(isTrailing && trailingIconName) || $slots.trailing\" :class=\"trailingWrapperIconClass\">\n            <slot name=\"trailing\" :disabled=\"disabled\" :loading=\"loading\">\n              <UIcon :name=\"trailingIconName\" :class=\"trailingIconClass\" aria-hidden=\"true\" />\n            </slot>\n          </span>\n        </button>\n      </slot>\n    </component>\n\n    <div v-if=\"open\" ref=\"container\" :class=\"[uiMenu.container, uiMenu.width]\">\n      <Transition appear v-bind=\"uiMenu.transition\">\n        <div>\n          <div v-if=\"popper.arrow\" data-popper-arrow :class=\"Object.values(uiMenu.arrow)\" />\n\n          <component :is=\"searchable ? 'HComboboxOptions' : 'HListboxOptions'\" static :class=\"[uiMenu.base, uiMenu.ring, uiMenu.rounded, uiMenu.shadow, uiMenu.background, uiMenu.padding, uiMenu.height]\">\n            <HComboboxInput\n              v-if=\"searchable\"\n              :display-value=\"() => query\"\n              name=\"q\"\n              :placeholder=\"searchablePlaceholder\"\n              autofocus\n              autocomplete=\"off\"\n              :class=\"uiMenu.input\"\n              @change=\"onChange\"\n            />\n            <component\n              :is=\"searchable ? 'HComboboxOption' : 'HListboxOption'\"\n              v-for=\"(option, index) in filteredOptions\"\n              v-slot=\"{ active, selected, disabled: optionDisabled }\"\n              :key=\"index\"\n              as=\"template\"\n              :value=\"valueAttribute ? option[valueAttribute] : option\"\n              :disabled=\"option.disabled\"\n            >\n              <li :class=\"[uiMenu.option.base, uiMenu.option.rounded, uiMenu.option.padding, uiMenu.option.size, uiMenu.option.color, active ? uiMenu.option.active : uiMenu.option.inactive, selected && uiMenu.option.selected, optionDisabled && uiMenu.option.disabled]\">\n                <div :class=\"uiMenu.option.container\">\n                  <slot name=\"option\" :option=\"option\" :active=\"active\" :selected=\"selected\">\n                    <UIcon v-if=\"option.icon\" :name=\"option.icon\" :class=\"[uiMenu.option.icon.base, active ? uiMenu.option.icon.active : uiMenu.option.icon.inactive, option.iconClass]\" aria-hidden=\"true\" />\n                    <UAvatar\n                      v-else-if=\"option.avatar\"\n                      v-bind=\"{ size: uiMenu.option.avatar.size, ...option.avatar }\"\n                      :class=\"uiMenu.option.avatar.base\"\n                      aria-hidden=\"true\"\n                    />\n                    <span v-else-if=\"option.chip\" :class=\"uiMenu.option.chip.base\" :style=\"{ background: `#${option.chip}` }\" />\n\n                    <span class=\"truncate\">{{ ['string', 'number'].includes(typeof option) ? option : option[optionAttribute] }}</span>\n                  </slot>\n                </div>\n\n                <span v-if=\"selected\" :class=\"[uiMenu.option.selectedIcon.wrapper, uiMenu.option.selectedIcon.padding]\">\n                  <UIcon :name=\"selectedIcon\" :class=\"uiMenu.option.selectedIcon.base\" aria-hidden=\"true\" />\n                </span>\n              </li>\n            </component>\n\n            <component :is=\"searchable ? 'HComboboxOption' : 'HListboxOption'\" v-if=\"creatable && createOption\" v-slot=\"{ active, selected }\" :value=\"createOption\" as=\"template\">\n              <li :class=\"[uiMenu.option.base, uiMenu.option.rounded, uiMenu.option.padding, uiMenu.option.size, uiMenu.option.color, active ? uiMenu.option.active : uiMenu.option.inactive]\">\n                <div :class=\"uiMenu.option.container\">\n                  <slot name=\"option-create\" :option=\"createOption\" :active=\"active\" :selected=\"selected\">\n                    <span :class=\"uiMenu.option.create\">Create \"{{ createOption[optionAttribute] }}\"</span>\n                  </slot>\n                </div>\n              </li>\n            </component>\n            <p v-else-if=\"searchable && query && !filteredOptions.length\" :class=\"uiMenu.option.empty\">\n              <slot name=\"option-empty\" :query=\"query\">\n                No results for \"{{ query }}\".\n              </slot>\n            </p>\n            <p v-else-if=\"!filteredOptions.length\" :class=\"uiMenu.empty\">\n              <slot name=\"empty\" :query=\"query\">\n                No options.\n              </slot>\n            </p>\n          </component>\n        </div>\n      </Transition>\n    </div>\n  </component>\n</template>\n\n<script>\nimport { ref, computed, toRef, watch, defineComponent } from \"vue\";\nimport {\n  Combobox as HCombobox,\n  ComboboxButton as HComboboxButton,\n  ComboboxOptions as HComboboxOptions,\n  ComboboxOption as HComboboxOption,\n  ComboboxInput as HComboboxInput,\n  Listbox as HListbox,\n  ListboxButton as HListboxButton,\n  ListboxOptions as HListboxOptions,\n  ListboxOption as HListboxOption\n} from \"@headlessui/vue\";\nimport { computedAsync, useDebounceFn } from \"@vueuse/core\";\nimport { defu } from \"defu\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { usePopper } from \"../../composables/usePopper\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { get, mergeConfig } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select, selectMenu } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nconst configMenu = mergeConfig(appConfig.ui.strategy, appConfig.ui.selectMenu, selectMenu);\nexport default defineComponent({\n  components: {\n    HCombobox,\n    HComboboxButton,\n    HComboboxOptions,\n    HComboboxOption,\n    HComboboxInput,\n    HListbox,\n    HListboxButton,\n    HListboxOptions,\n    HListboxOption,\n    UIcon,\n    UAvatar\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object, Array],\n      default: \"\"\n    },\n    query: {\n      type: String,\n      default: null\n    },\n    by: {\n      type: String,\n      default: void 0\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    selectedIcon: {\n      type: String,\n      default: () => configMenu.default.selectedIcon\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    searchable: {\n      type: [Boolean, Function],\n      default: false\n    },\n    searchablePlaceholder: {\n      type: String,\n      default: \"Search...\"\n    },\n    clearSearchOnClose: {\n      type: Boolean,\n      default: () => configMenu.default.clearSearchOnClose\n    },\n    debounce: {\n      type: Number,\n      default: 200\n    },\n    creatable: {\n      type: Boolean,\n      default: false\n    },\n    showCreateOptionWhen: {\n      type: String,\n      default: () => configMenu.default.showCreateOptionWhen\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: null\n    },\n    searchAttributes: {\n      type: Array,\n      default: null\n    },\n    popper: {\n      type: Object,\n      default: () => ({})\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    },\n    uiMenu: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:query\", \"open\", \"close\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { ui: uiMenu } = useUI(\"selectMenu\", toRef(props, \"uiMenu\"), configMenu);\n    const popper = computed(() => defu({}, props.popper, uiMenu.value.popper));\n    const [trigger, container] = usePopper(popper.value);\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormBlur, emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const internalQuery = ref(\"\");\n    const query = computed({\n      get() {\n        return props.query ?? internalQuery.value;\n      },\n      set(value) {\n        internalQuery.value = value;\n        emit(\"update:query\", value);\n      }\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        uiMenu.value.select,\n        rounded.value,\n        ui.value.size[size.value],\n        ui.value.gap[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    const debouncedSearch = typeof props.searchable === \"function\" ? useDebounceFn(props.searchable, props.debounce) : void 0;\n    const filteredOptions = computedAsync(async () => {\n      if (props.searchable && debouncedSearch) {\n        return await debouncedSearch(query.value);\n      }\n      if (query.value === \"\") {\n        return props.options;\n      }\n      return props.options.filter((option) => {\n        return (props.searchAttributes?.length ? props.searchAttributes : [props.optionAttribute]).some((searchAttribute) => {\n          if ([\"string\", \"number\"].includes(typeof option)) {\n            return String(option).search(new RegExp(query.value, \"i\")) !== -1;\n          }\n          const child = get(option, searchAttribute);\n          return child !== null && child !== void 0 && String(child).search(new RegExp(query.value, \"i\")) !== -1;\n        });\n      });\n    });\n    const createOption = computed(() => {\n      if (query.value === \"\") {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"empty\" && filteredOptions.value.length) {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"always\") {\n        const existingOption = filteredOptions.value.find((option) => [\"string\", \"number\"].includes(typeof option) ? option === query.value : option[props.optionAttribute] === query.value);\n        if (existingOption) {\n          return null;\n        }\n      }\n      return [\"string\", \"number\"].includes(typeof props.modelValue) ? query.value : { [props.optionAttribute]: query.value };\n    });\n    function clearOnClose() {\n      if (props.clearSearchOnClose) {\n        query.value = \"\";\n      }\n    }\n    watch(container, (value) => {\n      if (value) {\n        emit(\"open\");\n      } else {\n        clearOnClose();\n        emit(\"close\");\n        emitFormBlur();\n      }\n    });\n    function onUpdate(event) {\n      emit(\"update:modelValue\", event);\n      emit(\"change\", event);\n      emitFormChange();\n    }\n    function onChange(event) {\n      query.value = event.target.value;\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      // eslint-disable-next-line vue/no-dupe-keys\n      uiMenu,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      // eslint-disable-next-line vue/no-dupe-keys\n      popper,\n      trigger,\n      container,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      filteredOptions,\n      createOption,\n      // eslint-disable-next-line vue/no-dupe-keys\n      query,\n      onUpdate,\n      onChange\n    };\n  }\n});\n</script>\n",
      "start": 1717261250942,
      "end": 1717261251203,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261251203,
      "end": 1717261251203,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { ref, computed, toRef, watch, defineComponent } from \"vue\";\nimport {\n  Combobox as HCombobox,\n  ComboboxButton as HComboboxButton,\n  ComboboxOptions as HComboboxOptions,\n  ComboboxOption as HComboboxOption,\n  ComboboxInput as HComboboxInput,\n  Listbox as HListbox,\n  ListboxButton as HListboxButton,\n  ListboxOptions as HListboxOptions,\n  ListboxOption as HListboxOption\n} from \"@headlessui/vue\";\nimport { computedAsync, useDebounceFn } from \"@vueuse/core\";\nimport { defu } from \"defu\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { usePopper } from \"../../composables/usePopper\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { get, mergeConfig } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select, selectMenu } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nconst configMenu = mergeConfig(appConfig.ui.strategy, appConfig.ui.selectMenu, selectMenu);\nconst _sfc_main = defineComponent({\n  components: {\n    HCombobox,\n    HComboboxButton,\n    HComboboxOptions,\n    HComboboxOption,\n    HComboboxInput,\n    HListbox,\n    HListboxButton,\n    HListboxOptions,\n    HListboxOption,\n    UIcon,\n    UAvatar\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object, Array],\n      default: \"\"\n    },\n    query: {\n      type: String,\n      default: null\n    },\n    by: {\n      type: String,\n      default: void 0\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    selectedIcon: {\n      type: String,\n      default: () => configMenu.default.selectedIcon\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    searchable: {\n      type: [Boolean, Function],\n      default: false\n    },\n    searchablePlaceholder: {\n      type: String,\n      default: \"Search...\"\n    },\n    clearSearchOnClose: {\n      type: Boolean,\n      default: () => configMenu.default.clearSearchOnClose\n    },\n    debounce: {\n      type: Number,\n      default: 200\n    },\n    creatable: {\n      type: Boolean,\n      default: false\n    },\n    showCreateOptionWhen: {\n      type: String,\n      default: () => configMenu.default.showCreateOptionWhen\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: null\n    },\n    searchAttributes: {\n      type: Array,\n      default: null\n    },\n    popper: {\n      type: Object,\n      default: () => ({})\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    },\n    uiMenu: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:query\", \"open\", \"close\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { ui: uiMenu } = useUI(\"selectMenu\", toRef(props, \"uiMenu\"), configMenu);\n    const popper = computed(() => defu({}, props.popper, uiMenu.value.popper));\n    const [trigger, container] = usePopper(popper.value);\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormBlur, emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const internalQuery = ref(\"\");\n    const query = computed({\n      get() {\n        return props.query ?? internalQuery.value;\n      },\n      set(value) {\n        internalQuery.value = value;\n        emit(\"update:query\", value);\n      }\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        uiMenu.value.select,\n        rounded.value,\n        ui.value.size[size.value],\n        ui.value.gap[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    const debouncedSearch = typeof props.searchable === \"function\" ? useDebounceFn(props.searchable, props.debounce) : void 0;\n    const filteredOptions = computedAsync(async () => {\n      if (props.searchable && debouncedSearch) {\n        return await debouncedSearch(query.value);\n      }\n      if (query.value === \"\") {\n        return props.options;\n      }\n      return props.options.filter((option) => {\n        return (props.searchAttributes?.length ? props.searchAttributes : [props.optionAttribute]).some((searchAttribute) => {\n          if ([\"string\", \"number\"].includes(typeof option)) {\n            return String(option).search(new RegExp(query.value, \"i\")) !== -1;\n          }\n          const child = get(option, searchAttribute);\n          return child !== null && child !== void 0 && String(child).search(new RegExp(query.value, \"i\")) !== -1;\n        });\n      });\n    });\n    const createOption = computed(() => {\n      if (query.value === \"\") {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"empty\" && filteredOptions.value.length) {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"always\") {\n        const existingOption = filteredOptions.value.find((option) => [\"string\", \"number\"].includes(typeof option) ? option === query.value : option[props.optionAttribute] === query.value);\n        if (existingOption) {\n          return null;\n        }\n      }\n      return [\"string\", \"number\"].includes(typeof props.modelValue) ? query.value : { [props.optionAttribute]: query.value };\n    });\n    function clearOnClose() {\n      if (props.clearSearchOnClose) {\n        query.value = \"\";\n      }\n    }\n    watch(container, (value) => {\n      if (value) {\n        emit(\"open\");\n      } else {\n        clearOnClose();\n        emit(\"close\");\n        emitFormBlur();\n      }\n    });\n    function onUpdate(event) {\n      emit(\"update:modelValue\", event);\n      emit(\"change\", event);\n      emitFormChange();\n    }\n    function onChange(event) {\n      query.value = event.target.value;\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      // eslint-disable-next-line vue/no-dupe-keys\n      uiMenu,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      // eslint-disable-next-line vue/no-dupe-keys\n      popper,\n      trigger,\n      container,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      filteredOptions,\n      createOption,\n      // eslint-disable-next-line vue/no-dupe-keys\n      query,\n      onUpdate,\n      onChange\n    };\n  }\n});\n\nimport { normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, mergeProps as _mergeProps, createElementVNode as _createElementVNode, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, createTextVNode as _createTextVNode, Transition as _Transition } from \"vue\"\n\nconst _hoisted_1 = [\"value\", \"required\"]\nconst _hoisted_2 = [\"id\", \"disabled\"]\nconst _hoisted_3 = { class: \"truncate\" }\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = _resolveComponent(\"UIcon\")\n  const _component_HComboboxInput = _resolveComponent(\"HComboboxInput\")\n  const _component_UAvatar = _resolveComponent(\"UAvatar\")\n\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HCombobox' : 'HListbox'), {\n    by: _ctx.by,\n    name: _ctx.name,\n    \"model-value\": _ctx.modelValue,\n    multiple: _ctx.multiple,\n    disabled: _ctx.disabled,\n    as: \"div\",\n    class: _normalizeClass(_ctx.ui.wrapper),\n    \"onUpdate:modelValue\": _ctx.onUpdate\n  }, {\n    default: _withCtx(({ open }) => [\n      (_ctx.required)\n        ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 0,\n            value: _ctx.modelValue,\n            required: _ctx.required,\n            class: _normalizeClass(_ctx.uiMenu.required),\n            tabindex: \"-1\",\n            \"aria-hidden\": \"true\"\n          }, null, 10, _hoisted_1))\n        : _createCommentVNode(\"\", true),\n      (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxButton' : 'HListboxButton'), {\n        ref: \"trigger\",\n        as: \"div\",\n        role: \"button\",\n        class: _normalizeClass(_ctx.uiMenu.trigger)\n      }, {\n        default: _withCtx(() => [\n          _renderSlot(_ctx.$slots, \"default\", {\n            open: open,\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createElementVNode(\"button\", _mergeProps({\n              id: _ctx.inputId,\n              class: _ctx.selectClass,\n              disabled: _ctx.disabled,\n              type: \"button\"\n            }, _ctx.attrs), [\n              ((_ctx.isLeading && _ctx.leadingIconName) || _ctx.$slots.leading)\n                ? (_openBlock(), _createElementBlock(\"span\", {\n                    key: 0,\n                    class: _normalizeClass(_ctx.leadingWrapperIconClass)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"leading\", {\n                      disabled: _ctx.disabled,\n                      loading: _ctx.loading\n                    }, () => [\n                      _createVNode(_component_UIcon, {\n                        name: _ctx.leadingIconName,\n                        class: _normalizeClass(_ctx.leadingIconClass)\n                      }, null, 8, [\"name\", \"class\"])\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              _renderSlot(_ctx.$slots, \"label\", {}, () => [\n                (_ctx.multiple && Array.isArray(_ctx.modelValue) && _ctx.modelValue.length)\n                  ? (_openBlock(), _createElementBlock(\"span\", {\n                      key: 0,\n                      class: _normalizeClass(_ctx.uiMenu.label)\n                    }, _toDisplayString(_ctx.modelValue.length) + \" selected\", 3))\n                  : (!_ctx.multiple && _ctx.modelValue)\n                    ? (_openBlock(), _createElementBlock(\"span\", {\n                        key: 1,\n                        class: _normalizeClass(_ctx.uiMenu.label)\n                      }, _toDisplayString(['string', 'number'].includes(typeof _ctx.modelValue) ? _ctx.modelValue : _ctx.modelValue[_ctx.optionAttribute]), 3))\n                    : (_openBlock(), _createElementBlock(\"span\", {\n                        key: 2,\n                        class: _normalizeClass(_ctx.uiMenu.label)\n                      }, _toDisplayString(_ctx.placeholder || ' '), 3))\n              ]),\n              ((_ctx.isTrailing && _ctx.trailingIconName) || _ctx.$slots.trailing)\n                ? (_openBlock(), _createElementBlock(\"span\", {\n                    key: 1,\n                    class: _normalizeClass(_ctx.trailingWrapperIconClass)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"trailing\", {\n                      disabled: _ctx.disabled,\n                      loading: _ctx.loading\n                    }, () => [\n                      _createVNode(_component_UIcon, {\n                        name: _ctx.trailingIconName,\n                        class: _normalizeClass(_ctx.trailingIconClass),\n                        \"aria-hidden\": \"true\"\n                      }, null, 8, [\"name\", \"class\"])\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true)\n            ], 16, _hoisted_2)\n          ])\n        ]),\n        _: 2\n      }, 1032, [\"class\"])),\n      open\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            ref: \"container\",\n            class: _normalizeClass([_ctx.uiMenu.container, _ctx.uiMenu.width])\n          }, [\n            _createVNode(_Transition, _mergeProps({ appear: \"\" }, _ctx.uiMenu.transition), {\n              default: _withCtx(() => [\n                _createElementVNode(\"div\", null, [\n                  (_ctx.popper.arrow)\n                    ? (_openBlock(), _createElementBlock(\"div\", {\n                        key: 0,\n                        \"data-popper-arrow\": \"\",\n                        class: _normalizeClass(Object.values(_ctx.uiMenu.arrow))\n                      }, null, 2))\n                    : _createCommentVNode(\"\", true),\n                  (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOptions' : 'HListboxOptions'), {\n                    static: \"\",\n                    class: _normalizeClass([_ctx.uiMenu.base, _ctx.uiMenu.ring, _ctx.uiMenu.rounded, _ctx.uiMenu.shadow, _ctx.uiMenu.background, _ctx.uiMenu.padding, _ctx.uiMenu.height])\n                  }, {\n                    default: _withCtx(() => [\n                      (_ctx.searchable)\n                        ? (_openBlock(), _createBlock(_component_HComboboxInput, {\n                            key: 0,\n                            \"display-value\": () => _ctx.query,\n                            name: \"q\",\n                            placeholder: _ctx.searchablePlaceholder,\n                            autofocus: \"\",\n                            autocomplete: \"off\",\n                            class: _normalizeClass(_ctx.uiMenu.input),\n                            onChange: _ctx.onChange\n                          }, null, 8, [\"display-value\", \"placeholder\", \"class\", \"onChange\"]))\n                        : _createCommentVNode(\"\", true),\n                      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredOptions, (option, index) => {\n                        return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOption' : 'HListboxOption'), {\n                          key: index,\n                          as: \"template\",\n                          value: _ctx.valueAttribute ? option[_ctx.valueAttribute] : option,\n                          disabled: option.disabled\n                        }, {\n                          default: _withCtx(({ active, selected, disabled: optionDisabled }) => [\n                            _createElementVNode(\"li\", {\n                              class: _normalizeClass([_ctx.uiMenu.option.base, _ctx.uiMenu.option.rounded, _ctx.uiMenu.option.padding, _ctx.uiMenu.option.size, _ctx.uiMenu.option.color, active ? _ctx.uiMenu.option.active : _ctx.uiMenu.option.inactive, selected && _ctx.uiMenu.option.selected, optionDisabled && _ctx.uiMenu.option.disabled])\n                            }, [\n                              _createElementVNode(\"div\", {\n                                class: _normalizeClass(_ctx.uiMenu.option.container)\n                              }, [\n                                _renderSlot(_ctx.$slots, \"option\", {\n                                  option: option,\n                                  active: active,\n                                  selected: selected\n                                }, () => [\n                                  (option.icon)\n                                    ? (_openBlock(), _createBlock(_component_UIcon, {\n                                        key: 0,\n                                        name: option.icon,\n                                        class: _normalizeClass([_ctx.uiMenu.option.icon.base, active ? _ctx.uiMenu.option.icon.active : _ctx.uiMenu.option.icon.inactive, option.iconClass]),\n                                        \"aria-hidden\": \"true\"\n                                      }, null, 8, [\"name\", \"class\"]))\n                                    : (option.avatar)\n                                      ? (_openBlock(), _createBlock(_component_UAvatar, _mergeProps({ key: 1 }, { size: _ctx.uiMenu.option.avatar.size, ...option.avatar }, {\n                                          class: _ctx.uiMenu.option.avatar.base,\n                                          \"aria-hidden\": \"true\"\n                                        }), null, 16, [\"class\"]))\n                                      : (option.chip)\n                                        ? (_openBlock(), _createElementBlock(\"span\", {\n                                            key: 2,\n                                            class: _normalizeClass(_ctx.uiMenu.option.chip.base),\n                                            style: _normalizeStyle({ background: `#${option.chip}` })\n                                          }, null, 6))\n                                        : _createCommentVNode(\"\", true),\n                                  _createElementVNode(\"span\", _hoisted_3, _toDisplayString(['string', 'number'].includes(typeof option) ? option : option[_ctx.optionAttribute]), 1)\n                                ])\n                              ], 2),\n                              selected\n                                ? (_openBlock(), _createElementBlock(\"span\", {\n                                    key: 0,\n                                    class: _normalizeClass([_ctx.uiMenu.option.selectedIcon.wrapper, _ctx.uiMenu.option.selectedIcon.padding])\n                                  }, [\n                                    _createVNode(_component_UIcon, {\n                                      name: _ctx.selectedIcon,\n                                      class: _normalizeClass(_ctx.uiMenu.option.selectedIcon.base),\n                                      \"aria-hidden\": \"true\"\n                                    }, null, 8, [\"name\", \"class\"])\n                                  ], 2))\n                                : _createCommentVNode(\"\", true)\n                            ], 2)\n                          ]),\n                          _: 2\n                        }, 1032, [\"value\", \"disabled\"]))\n                      }), 128)),\n                      (_ctx.creatable && _ctx.createOption)\n                        ? (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOption' : 'HListboxOption'), {\n                            key: 1,\n                            value: _ctx.createOption,\n                            as: \"template\"\n                          }, {\n                            default: _withCtx(({ active, selected }) => [\n                              _createElementVNode(\"li\", {\n                                class: _normalizeClass([_ctx.uiMenu.option.base, _ctx.uiMenu.option.rounded, _ctx.uiMenu.option.padding, _ctx.uiMenu.option.size, _ctx.uiMenu.option.color, active ? _ctx.uiMenu.option.active : _ctx.uiMenu.option.inactive])\n                              }, [\n                                _createElementVNode(\"div\", {\n                                  class: _normalizeClass(_ctx.uiMenu.option.container)\n                                }, [\n                                  _renderSlot(_ctx.$slots, \"option-create\", {\n                                    option: _ctx.createOption,\n                                    active: active,\n                                    selected: selected\n                                  }, () => [\n                                    _createElementVNode(\"span\", {\n                                      class: _normalizeClass(_ctx.uiMenu.option.create)\n                                    }, \"Create \\\"\" + _toDisplayString(_ctx.createOption[_ctx.optionAttribute]) + \"\\\"\", 3)\n                                  ])\n                                ], 2)\n                              ], 2)\n                            ]),\n                            _: 3\n                          }, 8, [\"value\"]))\n                        : (_ctx.searchable && _ctx.query && !_ctx.filteredOptions.length)\n                          ? (_openBlock(), _createElementBlock(\"p\", {\n                              key: 2,\n                              class: _normalizeClass(_ctx.uiMenu.option.empty)\n                            }, [\n                              _renderSlot(_ctx.$slots, \"option-empty\", { query: _ctx.query }, () => [\n                                _createTextVNode(\" No results for \\\"\" + _toDisplayString(_ctx.query) + \"\\\". \", 1)\n                              ])\n                            ], 2))\n                          : (!_ctx.filteredOptions.length)\n                            ? (_openBlock(), _createElementBlock(\"p\", {\n                                key: 3,\n                                class: _normalizeClass(_ctx.uiMenu.empty)\n                              }, [\n                                _renderSlot(_ctx.$slots, \"empty\", { query: _ctx.query }, () => [\n                                  _createTextVNode(\" No options. \")\n                                ])\n                              ], 2))\n                            : _createCommentVNode(\"\", true)\n                    ]),\n                    _: 3\n                  }, 8, [\"class\"]))\n                ])\n              ]),\n              _: 3\n            }, 16)\n          ], 2))\n        : _createCommentVNode(\"\", true)\n    ]),\n    _: 3\n  }, 8, [\"by\", \"name\", \"model-value\", \"multiple\", \"disabled\", \"class\", \"onUpdate:modelValue\"]))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1717261251203,
      "end": 1717261251244,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261251244,
      "end": 1717261251244,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261251244,
      "end": 1717261251244,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261251244,
      "end": 1717261251244,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261251244,
      "end": 1717261251244,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261251244,
      "end": 1717261251244,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261251244,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261251245,
      "end": 1717261251245,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261251246,
      "end": 1717261251246,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261251246,
      "end": 1717261251246,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\nimport { default as __nuxt_component_1 } from \"/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/elements/Avatar.vue\";\n\nimport { ref, computed, toRef, watch, defineComponent } from \"vue\";\nimport {\n  Combobox as HCombobox,\n  ComboboxButton as HComboboxButton,\n  ComboboxOptions as HComboboxOptions,\n  ComboboxOption as HComboboxOption,\n  ComboboxInput as HComboboxInput,\n  Listbox as HListbox,\n  ListboxButton as HListboxButton,\n  ListboxOptions as HListboxOptions,\n  ListboxOption as HListboxOption\n} from \"@headlessui/vue\";\nimport { computedAsync, useDebounceFn } from \"@vueuse/core\";\nimport { defu } from \"defu\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { usePopper } from \"../../composables/usePopper\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { get, mergeConfig } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select, selectMenu } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nconst configMenu = mergeConfig(appConfig.ui.strategy, appConfig.ui.selectMenu, selectMenu);\nconst _sfc_main = defineComponent({\n  components: {\n    HCombobox,\n    HComboboxButton,\n    HComboboxOptions,\n    HComboboxOption,\n    HComboboxInput,\n    HListbox,\n    HListboxButton,\n    HListboxOptions,\n    HListboxOption,\n    UIcon,\n    UAvatar\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object, Array],\n      default: \"\"\n    },\n    query: {\n      type: String,\n      default: null\n    },\n    by: {\n      type: String,\n      default: void 0\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    selectedIcon: {\n      type: String,\n      default: () => configMenu.default.selectedIcon\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    searchable: {\n      type: [Boolean, Function],\n      default: false\n    },\n    searchablePlaceholder: {\n      type: String,\n      default: \"Search...\"\n    },\n    clearSearchOnClose: {\n      type: Boolean,\n      default: () => configMenu.default.clearSearchOnClose\n    },\n    debounce: {\n      type: Number,\n      default: 200\n    },\n    creatable: {\n      type: Boolean,\n      default: false\n    },\n    showCreateOptionWhen: {\n      type: String,\n      default: () => configMenu.default.showCreateOptionWhen\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: null\n    },\n    searchAttributes: {\n      type: Array,\n      default: null\n    },\n    popper: {\n      type: Object,\n      default: () => ({})\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    },\n    uiMenu: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:query\", \"open\", \"close\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { ui: uiMenu } = useUI(\"selectMenu\", toRef(props, \"uiMenu\"), configMenu);\n    const popper = computed(() => defu({}, props.popper, uiMenu.value.popper));\n    const [trigger, container] = usePopper(popper.value);\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormBlur, emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const internalQuery = ref(\"\");\n    const query = computed({\n      get() {\n        return props.query ?? internalQuery.value;\n      },\n      set(value) {\n        internalQuery.value = value;\n        emit(\"update:query\", value);\n      }\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        uiMenu.value.select,\n        rounded.value,\n        ui.value.size[size.value],\n        ui.value.gap[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    const debouncedSearch = typeof props.searchable === \"function\" ? useDebounceFn(props.searchable, props.debounce) : void 0;\n    const filteredOptions = computedAsync(async () => {\n      if (props.searchable && debouncedSearch) {\n        return await debouncedSearch(query.value);\n      }\n      if (query.value === \"\") {\n        return props.options;\n      }\n      return props.options.filter((option) => {\n        return (props.searchAttributes?.length ? props.searchAttributes : [props.optionAttribute]).some((searchAttribute) => {\n          if ([\"string\", \"number\"].includes(typeof option)) {\n            return String(option).search(new RegExp(query.value, \"i\")) !== -1;\n          }\n          const child = get(option, searchAttribute);\n          return child !== null && child !== void 0 && String(child).search(new RegExp(query.value, \"i\")) !== -1;\n        });\n      });\n    });\n    const createOption = computed(() => {\n      if (query.value === \"\") {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"empty\" && filteredOptions.value.length) {\n        return null;\n      }\n      if (props.showCreateOptionWhen === \"always\") {\n        const existingOption = filteredOptions.value.find((option) => [\"string\", \"number\"].includes(typeof option) ? option === query.value : option[props.optionAttribute] === query.value);\n        if (existingOption) {\n          return null;\n        }\n      }\n      return [\"string\", \"number\"].includes(typeof props.modelValue) ? query.value : { [props.optionAttribute]: query.value };\n    });\n    function clearOnClose() {\n      if (props.clearSearchOnClose) {\n        query.value = \"\";\n      }\n    }\n    watch(container, (value) => {\n      if (value) {\n        emit(\"open\");\n      } else {\n        clearOnClose();\n        emit(\"close\");\n        emitFormBlur();\n      }\n    });\n    function onUpdate(event) {\n      emit(\"update:modelValue\", event);\n      emit(\"change\", event);\n      emitFormChange();\n    }\n    function onChange(event) {\n      query.value = event.target.value;\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      // eslint-disable-next-line vue/no-dupe-keys\n      uiMenu,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      // eslint-disable-next-line vue/no-dupe-keys\n      popper,\n      trigger,\n      container,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      filteredOptions,\n      createOption,\n      // eslint-disable-next-line vue/no-dupe-keys\n      query,\n      onUpdate,\n      onChange\n    };\n  }\n});\n\nimport { normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, mergeProps as _mergeProps, createElementVNode as _createElementVNode, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle, createTextVNode as _createTextVNode, Transition as _Transition } from \"vue\"\n\nconst _hoisted_1 = [\"value\", \"required\"]\nconst _hoisted_2 = [\"id\", \"disabled\"]\nconst _hoisted_3 = { class: \"truncate\" }\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = __nuxt_component_0\n  const _component_HComboboxInput = _resolveComponent(\"HComboboxInput\")\n  const _component_UAvatar = __nuxt_component_1\n\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HCombobox' : 'HListbox'), {\n    by: _ctx.by,\n    name: _ctx.name,\n    \"model-value\": _ctx.modelValue,\n    multiple: _ctx.multiple,\n    disabled: _ctx.disabled,\n    as: \"div\",\n    class: _normalizeClass(_ctx.ui.wrapper),\n    \"onUpdate:modelValue\": _ctx.onUpdate\n  }, {\n    default: _withCtx(({ open }) => [\n      (_ctx.required)\n        ? (_openBlock(), _createElementBlock(\"input\", {\n            key: 0,\n            value: _ctx.modelValue,\n            required: _ctx.required,\n            class: _normalizeClass(_ctx.uiMenu.required),\n            tabindex: \"-1\",\n            \"aria-hidden\": \"true\"\n          }, null, 10, _hoisted_1))\n        : _createCommentVNode(\"\", true),\n      (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxButton' : 'HListboxButton'), {\n        ref: \"trigger\",\n        as: \"div\",\n        role: \"button\",\n        class: _normalizeClass(_ctx.uiMenu.trigger)\n      }, {\n        default: _withCtx(() => [\n          _renderSlot(_ctx.$slots, \"default\", {\n            open: open,\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createElementVNode(\"button\", _mergeProps({\n              id: _ctx.inputId,\n              class: _ctx.selectClass,\n              disabled: _ctx.disabled,\n              type: \"button\"\n            }, _ctx.attrs), [\n              ((_ctx.isLeading && _ctx.leadingIconName) || _ctx.$slots.leading)\n                ? (_openBlock(), _createElementBlock(\"span\", {\n                    key: 0,\n                    class: _normalizeClass(_ctx.leadingWrapperIconClass)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"leading\", {\n                      disabled: _ctx.disabled,\n                      loading: _ctx.loading\n                    }, () => [\n                      _createVNode(_component_UIcon, {\n                        name: _ctx.leadingIconName,\n                        class: _normalizeClass(_ctx.leadingIconClass)\n                      }, null, 8, [\"name\", \"class\"])\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              _renderSlot(_ctx.$slots, \"label\", {}, () => [\n                (_ctx.multiple && Array.isArray(_ctx.modelValue) && _ctx.modelValue.length)\n                  ? (_openBlock(), _createElementBlock(\"span\", {\n                      key: 0,\n                      class: _normalizeClass(_ctx.uiMenu.label)\n                    }, _toDisplayString(_ctx.modelValue.length) + \" selected\", 3))\n                  : (!_ctx.multiple && _ctx.modelValue)\n                    ? (_openBlock(), _createElementBlock(\"span\", {\n                        key: 1,\n                        class: _normalizeClass(_ctx.uiMenu.label)\n                      }, _toDisplayString(['string', 'number'].includes(typeof _ctx.modelValue) ? _ctx.modelValue : _ctx.modelValue[_ctx.optionAttribute]), 3))\n                    : (_openBlock(), _createElementBlock(\"span\", {\n                        key: 2,\n                        class: _normalizeClass(_ctx.uiMenu.label)\n                      }, _toDisplayString(_ctx.placeholder || ' '), 3))\n              ]),\n              ((_ctx.isTrailing && _ctx.trailingIconName) || _ctx.$slots.trailing)\n                ? (_openBlock(), _createElementBlock(\"span\", {\n                    key: 1,\n                    class: _normalizeClass(_ctx.trailingWrapperIconClass)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"trailing\", {\n                      disabled: _ctx.disabled,\n                      loading: _ctx.loading\n                    }, () => [\n                      _createVNode(_component_UIcon, {\n                        name: _ctx.trailingIconName,\n                        class: _normalizeClass(_ctx.trailingIconClass),\n                        \"aria-hidden\": \"true\"\n                      }, null, 8, [\"name\", \"class\"])\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true)\n            ], 16, _hoisted_2)\n          ])\n        ]),\n        _: 2\n      }, 1032, [\"class\"])),\n      open\n        ? (_openBlock(), _createElementBlock(\"div\", {\n            key: 1,\n            ref: \"container\",\n            class: _normalizeClass([_ctx.uiMenu.container, _ctx.uiMenu.width])\n          }, [\n            _createVNode(_Transition, _mergeProps({ appear: \"\" }, _ctx.uiMenu.transition), {\n              default: _withCtx(() => [\n                _createElementVNode(\"div\", null, [\n                  (_ctx.popper.arrow)\n                    ? (_openBlock(), _createElementBlock(\"div\", {\n                        key: 0,\n                        \"data-popper-arrow\": \"\",\n                        class: _normalizeClass(Object.values(_ctx.uiMenu.arrow))\n                      }, null, 2))\n                    : _createCommentVNode(\"\", true),\n                  (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOptions' : 'HListboxOptions'), {\n                    static: \"\",\n                    class: _normalizeClass([_ctx.uiMenu.base, _ctx.uiMenu.ring, _ctx.uiMenu.rounded, _ctx.uiMenu.shadow, _ctx.uiMenu.background, _ctx.uiMenu.padding, _ctx.uiMenu.height])\n                  }, {\n                    default: _withCtx(() => [\n                      (_ctx.searchable)\n                        ? (_openBlock(), _createBlock(_component_HComboboxInput, {\n                            key: 0,\n                            \"display-value\": () => _ctx.query,\n                            name: \"q\",\n                            placeholder: _ctx.searchablePlaceholder,\n                            autofocus: \"\",\n                            autocomplete: \"off\",\n                            class: _normalizeClass(_ctx.uiMenu.input),\n                            onChange: _ctx.onChange\n                          }, null, 8, [\"display-value\", \"placeholder\", \"class\", \"onChange\"]))\n                        : _createCommentVNode(\"\", true),\n                      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredOptions, (option, index) => {\n                        return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOption' : 'HListboxOption'), {\n                          key: index,\n                          as: \"template\",\n                          value: _ctx.valueAttribute ? option[_ctx.valueAttribute] : option,\n                          disabled: option.disabled\n                        }, {\n                          default: _withCtx(({ active, selected, disabled: optionDisabled }) => [\n                            _createElementVNode(\"li\", {\n                              class: _normalizeClass([_ctx.uiMenu.option.base, _ctx.uiMenu.option.rounded, _ctx.uiMenu.option.padding, _ctx.uiMenu.option.size, _ctx.uiMenu.option.color, active ? _ctx.uiMenu.option.active : _ctx.uiMenu.option.inactive, selected && _ctx.uiMenu.option.selected, optionDisabled && _ctx.uiMenu.option.disabled])\n                            }, [\n                              _createElementVNode(\"div\", {\n                                class: _normalizeClass(_ctx.uiMenu.option.container)\n                              }, [\n                                _renderSlot(_ctx.$slots, \"option\", {\n                                  option: option,\n                                  active: active,\n                                  selected: selected\n                                }, () => [\n                                  (option.icon)\n                                    ? (_openBlock(), _createBlock(_component_UIcon, {\n                                        key: 0,\n                                        name: option.icon,\n                                        class: _normalizeClass([_ctx.uiMenu.option.icon.base, active ? _ctx.uiMenu.option.icon.active : _ctx.uiMenu.option.icon.inactive, option.iconClass]),\n                                        \"aria-hidden\": \"true\"\n                                      }, null, 8, [\"name\", \"class\"]))\n                                    : (option.avatar)\n                                      ? (_openBlock(), _createBlock(_component_UAvatar, _mergeProps({ key: 1 }, { size: _ctx.uiMenu.option.avatar.size, ...option.avatar }, {\n                                          class: _ctx.uiMenu.option.avatar.base,\n                                          \"aria-hidden\": \"true\"\n                                        }), null, 16, [\"class\"]))\n                                      : (option.chip)\n                                        ? (_openBlock(), _createElementBlock(\"span\", {\n                                            key: 2,\n                                            class: _normalizeClass(_ctx.uiMenu.option.chip.base),\n                                            style: _normalizeStyle({ background: `#${option.chip}` })\n                                          }, null, 6))\n                                        : _createCommentVNode(\"\", true),\n                                  _createElementVNode(\"span\", _hoisted_3, _toDisplayString(['string', 'number'].includes(typeof option) ? option : option[_ctx.optionAttribute]), 1)\n                                ])\n                              ], 2),\n                              selected\n                                ? (_openBlock(), _createElementBlock(\"span\", {\n                                    key: 0,\n                                    class: _normalizeClass([_ctx.uiMenu.option.selectedIcon.wrapper, _ctx.uiMenu.option.selectedIcon.padding])\n                                  }, [\n                                    _createVNode(_component_UIcon, {\n                                      name: _ctx.selectedIcon,\n                                      class: _normalizeClass(_ctx.uiMenu.option.selectedIcon.base),\n                                      \"aria-hidden\": \"true\"\n                                    }, null, 8, [\"name\", \"class\"])\n                                  ], 2))\n                                : _createCommentVNode(\"\", true)\n                            ], 2)\n                          ]),\n                          _: 2\n                        }, 1032, [\"value\", \"disabled\"]))\n                      }), 128)),\n                      (_ctx.creatable && _ctx.createOption)\n                        ? (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.searchable ? 'HComboboxOption' : 'HListboxOption'), {\n                            key: 1,\n                            value: _ctx.createOption,\n                            as: \"template\"\n                          }, {\n                            default: _withCtx(({ active, selected }) => [\n                              _createElementVNode(\"li\", {\n                                class: _normalizeClass([_ctx.uiMenu.option.base, _ctx.uiMenu.option.rounded, _ctx.uiMenu.option.padding, _ctx.uiMenu.option.size, _ctx.uiMenu.option.color, active ? _ctx.uiMenu.option.active : _ctx.uiMenu.option.inactive])\n                              }, [\n                                _createElementVNode(\"div\", {\n                                  class: _normalizeClass(_ctx.uiMenu.option.container)\n                                }, [\n                                  _renderSlot(_ctx.$slots, \"option-create\", {\n                                    option: _ctx.createOption,\n                                    active: active,\n                                    selected: selected\n                                  }, () => [\n                                    _createElementVNode(\"span\", {\n                                      class: _normalizeClass(_ctx.uiMenu.option.create)\n                                    }, \"Create \\\"\" + _toDisplayString(_ctx.createOption[_ctx.optionAttribute]) + \"\\\"\", 3)\n                                  ])\n                                ], 2)\n                              ], 2)\n                            ]),\n                            _: 3\n                          }, 8, [\"value\"]))\n                        : (_ctx.searchable && _ctx.query && !_ctx.filteredOptions.length)\n                          ? (_openBlock(), _createElementBlock(\"p\", {\n                              key: 2,\n                              class: _normalizeClass(_ctx.uiMenu.option.empty)\n                            }, [\n                              _renderSlot(_ctx.$slots, \"option-empty\", { query: _ctx.query }, () => [\n                                _createTextVNode(\" No results for \\\"\" + _toDisplayString(_ctx.query) + \"\\\". \", 1)\n                              ])\n                            ], 2))\n                          : (!_ctx.filteredOptions.length)\n                            ? (_openBlock(), _createElementBlock(\"p\", {\n                                key: 3,\n                                class: _normalizeClass(_ctx.uiMenu.empty)\n                              }, [\n                                _renderSlot(_ctx.$slots, \"empty\", { query: _ctx.query }, () => [\n                                  _createTextVNode(\" No options. \")\n                                ])\n                              ], 2))\n                            : _createCommentVNode(\"\", true)\n                    ]),\n                    _: 3\n                  }, 8, [\"class\"]))\n                ])\n              ]),\n              _: 3\n            }, 16)\n          ], 2))\n        : _createCommentVNode(\"\", true)\n    ]),\n    _: 3\n  }, 8, [\"by\", \"name\", \"model-value\", \"multiple\", \"disabled\", \"class\", \"onUpdate:modelValue\"]))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1717261251246,
      "end": 1717261251246,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261251246,
      "end": 1717261251246,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261251246,
      "end": 1717261251246,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261251247,
      "end": 1717261251247,
      "order": "normal"
    }
  ]
}
