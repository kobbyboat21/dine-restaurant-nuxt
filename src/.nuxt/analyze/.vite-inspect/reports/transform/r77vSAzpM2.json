{
  "resolvedId": "/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/data/Table.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <div :class=\"ui.wrapper\" v-bind=\"attrs\">\n    <table :class=\"[ui.base, ui.divide]\">\n      <thead :class=\"ui.thead\">\n        <tr :class=\"ui.tr.base\">\n          <th v-if=\"modelValue\" scope=\"col\" :class=\"ui.checkbox.padding\">\n            <UCheckbox :checked=\"indeterminate || selected.length === rows.length\" :indeterminate=\"indeterminate\" aria-label=\"Select all\" @change=\"onChange\" />\n          </th>\n\n          <th v-for=\"(column, index) in columns\" :key=\"index\" scope=\"col\" :class=\"[ui.th.base, ui.th.padding, ui.th.color, ui.th.font, ui.th.size, column.class]\">\n            <slot :name=\"`${column.key}-header`\" :column=\"column\" :sort=\"sort\" :on-sort=\"onSort\">\n              <UButton\n                v-if=\"column.sortable\"\n                v-bind=\"{ ...(ui.default.sortButton || {}), ...sortButton }\"\n                :icon=\"(!sort.column || sort.column !== column.key) ? (sortButton.icon || ui.default.sortButton.icon) : sort.direction === 'asc' ? sortAscIcon : sortDescIcon\"\n                :label=\"column[columnAttribute]\"\n                @click=\"onSort(column)\"\n              />\n              <span v-else>{{ column[columnAttribute] }}</span>\n            </slot>\n          </th>\n        </tr>\n      </thead>\n      <tbody :class=\"ui.tbody\">\n        <tr v-if=\"loadingState && loading\">\n          <td :colspan=\"columns.length + (modelValue ? 1 : 0)\">\n            <slot name=\"loading-state\">\n              <div :class=\"ui.loadingState.wrapper\">\n                <UIcon v-if=\"loadingState.icon\" :name=\"loadingState.icon\" :class=\"ui.loadingState.icon\" aria-hidden=\"true\" />\n                <p :class=\"ui.loadingState.label\">\n                  {{ loadingState.label }}\n                </p>\n              </div>\n            </slot>\n          </td>\n        </tr>\n\n        <tr v-else-if=\"emptyState && !rows.length\">\n          <td :colspan=\"columns.length + (modelValue ? 1 : 0)\">\n            <slot name=\"empty-state\">\n              <div :class=\"ui.emptyState.wrapper\">\n                <UIcon v-if=\"emptyState.icon\" :name=\"emptyState.icon\" :class=\"ui.emptyState.icon\" aria-hidden=\"true\" />\n                <p :class=\"ui.emptyState.label\">\n                  {{ emptyState.label }}\n                </p>\n              </div>\n            </slot>\n          </td>\n        </tr>\n\n        <template v-else>\n          <tr v-for=\"(row, index) in rows\" :key=\"index\" :class=\"[ui.tr.base, isSelected(row) && ui.tr.selected, $attrs.onSelect && ui.tr.active, row?.class]\" @click=\"() => onSelect(row)\">\n            <td v-if=\"modelValue\" :class=\"ui.checkbox.padding\">\n              <UCheckbox v-model=\"selected\" :value=\"row\" aria-label=\"Select row\" @click.stop />\n            </td>\n\n            <td v-for=\"(column, subIndex) in columns\" :key=\"subIndex\" :class=\"[ui.td.base, ui.td.padding, ui.td.color, ui.td.font, ui.td.size, row[column.key]?.class]\">\n              <slot :name=\"`${column.key}-data`\" :column=\"column\" :row=\"row\" :index=\"index\" :get-row-data=\"(defaultValue) => getRowData(row, column.key, defaultValue)\">\n                {{ getRowData(row, column.key) }}\n              </slot>\n            </td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { computed, defineComponent, toRaw, toRef } from \"vue\";\nimport { upperFirst } from \"scule\";\nimport { defu } from \"defu\";\nimport { useVModel } from \"@vueuse/core\";\nimport UButton from \"../elements/Button.vue\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UCheckbox from \"../forms/Checkbox.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig, get } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { table } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.table, table);\nfunction defaultComparator(a, z) {\n  return a === z;\n}\nfunction defaultSort(a, b, direction) {\n  if (a === b) {\n    return 0;\n  }\n  if (direction === \"asc\") {\n    return a < b ? -1 : 1;\n  } else {\n    return a > b ? -1 : 1;\n  }\n}\nexport default defineComponent({\n  components: {\n    UButton,\n    UIcon,\n    UCheckbox\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: Array,\n      default: null\n    },\n    by: {\n      type: [String, Function],\n      default: () => defaultComparator\n    },\n    rows: {\n      type: Array,\n      default: () => []\n    },\n    columns: {\n      type: Array,\n      default: null\n    },\n    columnAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    sort: {\n      type: Object,\n      default: () => ({})\n    },\n    sortMode: {\n      type: String,\n      default: \"auto\"\n    },\n    sortButton: {\n      type: Object,\n      default: () => config.default.sortButton\n    },\n    sortAscIcon: {\n      type: String,\n      default: () => config.default.sortAscIcon\n    },\n    sortDescIcon: {\n      type: String,\n      default: () => config.default.sortDescIcon\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    loadingState: {\n      type: Object,\n      default: () => config.default.loadingState\n    },\n    emptyState: {\n      type: Object,\n      default: () => config.default.emptyState\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:sort\"],\n  setup(props, { emit, attrs: $attrs }) {\n    const { ui, attrs } = useUI(\"table\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const columns = computed(() => props.columns ?? Object.keys(props.rows[0] ?? {}).map((key) => ({ key, label: upperFirst(key), sortable: false, class: void 0, sort: defaultSort })));\n    const sort = useVModel(props, \"sort\", emit, { passive: true, defaultValue: defu({}, props.sort, { column: null, direction: \"asc\" }) });\n    const savedSort = { column: sort.value.column, direction: null };\n    const rows = computed(() => {\n      if (!sort.value?.column || props.sortMode === \"manual\") {\n        return props.rows;\n      }\n      const { column, direction } = sort.value;\n      return props.rows.slice().sort((a, b) => {\n        const aValue = get(a, column);\n        const bValue = get(b, column);\n        const sort2 = columns.value.find((col) => col.key === column)?.sort ?? defaultSort;\n        return sort2(aValue, bValue, direction);\n      });\n    });\n    const selected = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(value) {\n        emit(\"update:modelValue\", value);\n      }\n    });\n    const indeterminate = computed(() => selected.value && selected.value.length > 0 && selected.value.length < props.rows.length);\n    const emptyState = computed(() => {\n      if (props.emptyState === null)\n        return null;\n      return { ...ui.value.default.emptyState, ...props.emptyState };\n    });\n    const loadingState = computed(() => {\n      if (props.loadingState === null)\n        return null;\n      return { ...ui.value.default.loadingState, ...props.loadingState };\n    });\n    function compare(a, z) {\n      if (typeof props.by === \"string\") {\n        const property = props.by;\n        return a?.[property] === z?.[property];\n      }\n      return props.by(a, z);\n    }\n    function isSelected(row) {\n      if (!props.modelValue) {\n        return false;\n      }\n      return selected.value.some((item) => compare(toRaw(item), toRaw(row)));\n    }\n    function onSort(column) {\n      if (sort.value.column === column.key) {\n        const direction = !column.direction || column.direction === \"asc\" ? \"desc\" : \"asc\";\n        if (sort.value.direction === direction) {\n          sort.value = defu({}, savedSort, { column: null, direction: \"asc\" });\n        } else {\n          sort.value = { column: sort.value.column, direction: sort.value.direction === \"asc\" ? \"desc\" : \"asc\" };\n        }\n      } else {\n        sort.value = { column: column.key, direction: column.direction || \"asc\" };\n      }\n    }\n    function onSelect(row) {\n      if (!$attrs.onSelect) {\n        return;\n      }\n      $attrs.onSelect(row);\n    }\n    function selectAllRows() {\n      props.rows.forEach((row) => {\n        if (isSelected(row)) {\n          return;\n        }\n        selected.value.push(row);\n      });\n    }\n    function onChange(event) {\n      if (event.target.checked) {\n        selectAllRows();\n      } else {\n        selected.value = [];\n      }\n    }\n    function getRowData(row, rowKey, defaultValue = \"\") {\n      return get(row, rowKey, defaultValue);\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      sort,\n      // eslint-disable-next-line vue/no-dupe-keys\n      columns,\n      // eslint-disable-next-line vue/no-dupe-keys\n      rows,\n      selected,\n      indeterminate,\n      // eslint-disable-next-line vue/no-dupe-keys\n      emptyState,\n      // eslint-disable-next-line vue/no-dupe-keys\n      loadingState,\n      isSelected,\n      onSort,\n      onSelect,\n      onChange,\n      getRowData\n    };\n  }\n});\n</script>\n",
      "start": 1717261250806,
      "end": 1717261251108,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717261251108,
      "end": 1717261251108,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717261251108,
      "end": 1717261251108,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717261251108,
      "end": 1717261251108,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717261251108,
      "end": 1717261251108,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717261251108,
      "end": 1717261251108,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717261251109,
      "end": 1717261251109,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717261251109,
      "end": 1717261251109,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { computed, defineComponent, toRaw, toRef } from \"vue\";\nimport { upperFirst } from \"scule\";\nimport { defu } from \"defu\";\nimport { useVModel } from \"@vueuse/core\";\nimport UButton from \"../elements/Button.vue\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UCheckbox from \"../forms/Checkbox.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig, get } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { table } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.table, table);\nfunction defaultComparator(a, z) {\n  return a === z;\n}\nfunction defaultSort(a, b, direction) {\n  if (a === b) {\n    return 0;\n  }\n  if (direction === \"asc\") {\n    return a < b ? -1 : 1;\n  } else {\n    return a > b ? -1 : 1;\n  }\n}\nconst _sfc_main = defineComponent({\n  components: {\n    UButton,\n    UIcon,\n    UCheckbox\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: Array,\n      default: null\n    },\n    by: {\n      type: [String, Function],\n      default: () => defaultComparator\n    },\n    rows: {\n      type: Array,\n      default: () => []\n    },\n    columns: {\n      type: Array,\n      default: null\n    },\n    columnAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    sort: {\n      type: Object,\n      default: () => ({})\n    },\n    sortMode: {\n      type: String,\n      default: \"auto\"\n    },\n    sortButton: {\n      type: Object,\n      default: () => config.default.sortButton\n    },\n    sortAscIcon: {\n      type: String,\n      default: () => config.default.sortAscIcon\n    },\n    sortDescIcon: {\n      type: String,\n      default: () => config.default.sortDescIcon\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    loadingState: {\n      type: Object,\n      default: () => config.default.loadingState\n    },\n    emptyState: {\n      type: Object,\n      default: () => config.default.emptyState\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:sort\"],\n  setup(props, { emit, attrs: $attrs }) {\n    const { ui, attrs } = useUI(\"table\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const columns = computed(() => props.columns ?? Object.keys(props.rows[0] ?? {}).map((key) => ({ key, label: upperFirst(key), sortable: false, class: void 0, sort: defaultSort })));\n    const sort = useVModel(props, \"sort\", emit, { passive: true, defaultValue: defu({}, props.sort, { column: null, direction: \"asc\" }) });\n    const savedSort = { column: sort.value.column, direction: null };\n    const rows = computed(() => {\n      if (!sort.value?.column || props.sortMode === \"manual\") {\n        return props.rows;\n      }\n      const { column, direction } = sort.value;\n      return props.rows.slice().sort((a, b) => {\n        const aValue = get(a, column);\n        const bValue = get(b, column);\n        const sort2 = columns.value.find((col) => col.key === column)?.sort ?? defaultSort;\n        return sort2(aValue, bValue, direction);\n      });\n    });\n    const selected = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(value) {\n        emit(\"update:modelValue\", value);\n      }\n    });\n    const indeterminate = computed(() => selected.value && selected.value.length > 0 && selected.value.length < props.rows.length);\n    const emptyState = computed(() => {\n      if (props.emptyState === null)\n        return null;\n      return { ...ui.value.default.emptyState, ...props.emptyState };\n    });\n    const loadingState = computed(() => {\n      if (props.loadingState === null)\n        return null;\n      return { ...ui.value.default.loadingState, ...props.loadingState };\n    });\n    function compare(a, z) {\n      if (typeof props.by === \"string\") {\n        const property = props.by;\n        return a?.[property] === z?.[property];\n      }\n      return props.by(a, z);\n    }\n    function isSelected(row) {\n      if (!props.modelValue) {\n        return false;\n      }\n      return selected.value.some((item) => compare(toRaw(item), toRaw(row)));\n    }\n    function onSort(column) {\n      if (sort.value.column === column.key) {\n        const direction = !column.direction || column.direction === \"asc\" ? \"desc\" : \"asc\";\n        if (sort.value.direction === direction) {\n          sort.value = defu({}, savedSort, { column: null, direction: \"asc\" });\n        } else {\n          sort.value = { column: sort.value.column, direction: sort.value.direction === \"asc\" ? \"desc\" : \"asc\" };\n        }\n      } else {\n        sort.value = { column: column.key, direction: column.direction || \"asc\" };\n      }\n    }\n    function onSelect(row) {\n      if (!$attrs.onSelect) {\n        return;\n      }\n      $attrs.onSelect(row);\n    }\n    function selectAllRows() {\n      props.rows.forEach((row) => {\n        if (isSelected(row)) {\n          return;\n        }\n        selected.value.push(row);\n      });\n    }\n    function onChange(event) {\n      if (event.target.checked) {\n        selectAllRows();\n      } else {\n        selected.value = [];\n      }\n    }\n    function getRowData(row, rowKey, defaultValue = \"\") {\n      return get(row, rowKey, defaultValue);\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      sort,\n      // eslint-disable-next-line vue/no-dupe-keys\n      columns,\n      // eslint-disable-next-line vue/no-dupe-keys\n      rows,\n      selected,\n      indeterminate,\n      // eslint-disable-next-line vue/no-dupe-keys\n      emptyState,\n      // eslint-disable-next-line vue/no-dupe-keys\n      loadingState,\n      isSelected,\n      onSort,\n      onSelect,\n      onChange,\n      getRowData\n    };\n  }\n});\n\nimport { resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, renderSlot as _renderSlot, mergeProps as _mergeProps, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withModifiers as _withModifiers, createTextVNode as _createTextVNode } from \"vue\"\n\nconst _hoisted_1 = { key: 1 }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = [\"colspan\"]\nconst _hoisted_4 = { key: 1 }\nconst _hoisted_5 = [\"colspan\"]\nconst _hoisted_6 = [\"onClick\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UCheckbox = _resolveComponent(\"UCheckbox\")\n  const _component_UButton = _resolveComponent(\"UButton\")\n  const _component_UIcon = _resolveComponent(\"UIcon\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _mergeProps({\n    class: _ctx.ui.wrapper\n  }, _ctx.attrs), [\n    _createElementVNode(\"table\", {\n      class: _normalizeClass([_ctx.ui.base, _ctx.ui.divide])\n    }, [\n      _createElementVNode(\"thead\", {\n        class: _normalizeClass(_ctx.ui.thead)\n      }, [\n        _createElementVNode(\"tr\", {\n          class: _normalizeClass(_ctx.ui.tr.base)\n        }, [\n          (_ctx.modelValue)\n            ? (_openBlock(), _createElementBlock(\"th\", {\n                key: 0,\n                scope: \"col\",\n                class: _normalizeClass(_ctx.ui.checkbox.padding)\n              }, [\n                _createVNode(_component_UCheckbox, {\n                  checked: _ctx.indeterminate || _ctx.selected.length === _ctx.rows.length,\n                  indeterminate: _ctx.indeterminate,\n                  \"aria-label\": \"Select all\",\n                  onChange: _ctx.onChange\n                }, null, 8, [\"checked\", \"indeterminate\", \"onChange\"])\n              ], 2))\n            : _createCommentVNode(\"\", true),\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.columns, (column, index) => {\n            return (_openBlock(), _createElementBlock(\"th\", {\n              key: index,\n              scope: \"col\",\n              class: _normalizeClass([_ctx.ui.th.base, _ctx.ui.th.padding, _ctx.ui.th.color, _ctx.ui.th.font, _ctx.ui.th.size, column.class])\n            }, [\n              _renderSlot(_ctx.$slots, `${column.key}-header`, {\n                column: column,\n                sort: _ctx.sort,\n                onSort: _ctx.onSort\n              }, () => [\n                (column.sortable)\n                  ? (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: 0 }, { ...(_ctx.ui.default.sortButton || {}), ..._ctx.sortButton }, {\n                      icon: (!_ctx.sort.column || _ctx.sort.column !== column.key) ? (_ctx.sortButton.icon || _ctx.ui.default.sortButton.icon) : _ctx.sort.direction === 'asc' ? _ctx.sortAscIcon : _ctx.sortDescIcon,\n                      label: column[_ctx.columnAttribute],\n                      onClick: $event => (_ctx.onSort(column))\n                    }), null, 16, [\"icon\", \"label\", \"onClick\"]))\n                  : (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString(column[_ctx.columnAttribute]), 1))\n              ])\n            ], 2))\n          }), 128))\n        ], 2)\n      ], 2),\n      _createElementVNode(\"tbody\", {\n        class: _normalizeClass(_ctx.ui.tbody)\n      }, [\n        (_ctx.loadingState && _ctx.loading)\n          ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_2, [\n              _createElementVNode(\"td\", {\n                colspan: _ctx.columns.length + (_ctx.modelValue ? 1 : 0)\n              }, [\n                _renderSlot(_ctx.$slots, \"loading-state\", {}, () => [\n                  _createElementVNode(\"div\", {\n                    class: _normalizeClass(_ctx.ui.loadingState.wrapper)\n                  }, [\n                    (_ctx.loadingState.icon)\n                      ? (_openBlock(), _createBlock(_component_UIcon, {\n                          key: 0,\n                          name: _ctx.loadingState.icon,\n                          class: _normalizeClass(_ctx.ui.loadingState.icon),\n                          \"aria-hidden\": \"true\"\n                        }, null, 8, [\"name\", \"class\"]))\n                      : _createCommentVNode(\"\", true),\n                    _createElementVNode(\"p\", {\n                      class: _normalizeClass(_ctx.ui.loadingState.label)\n                    }, _toDisplayString(_ctx.loadingState.label), 3)\n                  ], 2)\n                ])\n              ], 8, _hoisted_3)\n            ]))\n          : (_ctx.emptyState && !_ctx.rows.length)\n            ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_4, [\n                _createElementVNode(\"td\", {\n                  colspan: _ctx.columns.length + (_ctx.modelValue ? 1 : 0)\n                }, [\n                  _renderSlot(_ctx.$slots, \"empty-state\", {}, () => [\n                    _createElementVNode(\"div\", {\n                      class: _normalizeClass(_ctx.ui.emptyState.wrapper)\n                    }, [\n                      (_ctx.emptyState.icon)\n                        ? (_openBlock(), _createBlock(_component_UIcon, {\n                            key: 0,\n                            name: _ctx.emptyState.icon,\n                            class: _normalizeClass(_ctx.ui.emptyState.icon),\n                            \"aria-hidden\": \"true\"\n                          }, null, 8, [\"name\", \"class\"]))\n                        : _createCommentVNode(\"\", true),\n                      _createElementVNode(\"p\", {\n                        class: _normalizeClass(_ctx.ui.emptyState.label)\n                      }, _toDisplayString(_ctx.emptyState.label), 3)\n                    ], 2)\n                  ])\n                ], 8, _hoisted_5)\n              ]))\n            : (_openBlock(true), _createElementBlock(_Fragment, { key: 2 }, _renderList(_ctx.rows, (row, index) => {\n                return (_openBlock(), _createElementBlock(\"tr\", {\n                  key: index,\n                  class: _normalizeClass([_ctx.ui.tr.base, _ctx.isSelected(row) && _ctx.ui.tr.selected, _ctx.$attrs.onSelect && _ctx.ui.tr.active, row?.class]),\n                  onClick: () => _ctx.onSelect(row)\n                }, [\n                  (_ctx.modelValue)\n                    ? (_openBlock(), _createElementBlock(\"td\", {\n                        key: 0,\n                        class: _normalizeClass(_ctx.ui.checkbox.padding)\n                      }, [\n                        _createVNode(_component_UCheckbox, {\n                          modelValue: _ctx.selected,\n                          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((_ctx.selected) = $event)),\n                          value: row,\n                          \"aria-label\": \"Select row\",\n                          onClick: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"stop\"]))\n                        }, null, 8, [\"modelValue\", \"value\"])\n                      ], 2))\n                    : _createCommentVNode(\"\", true),\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.columns, (column, subIndex) => {\n                    return (_openBlock(), _createElementBlock(\"td\", {\n                      key: subIndex,\n                      class: _normalizeClass([_ctx.ui.td.base, _ctx.ui.td.padding, _ctx.ui.td.color, _ctx.ui.td.font, _ctx.ui.td.size, row[column.key]?.class])\n                    }, [\n                      _renderSlot(_ctx.$slots, `${column.key}-data`, {\n                        column: column,\n                        row: row,\n                        index: index,\n                        getRowData: (defaultValue) => _ctx.getRowData(row, column.key, defaultValue)\n                      }, () => [\n                        _createTextVNode(_toDisplayString(_ctx.getRowData(row, column.key)), 1)\n                      ])\n                    ], 2))\n                  }), 128))\n                ], 10, _hoisted_6))\n              }), 128))\n      ], 2)\n    ], 2)\n  ], 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1717261251109,
      "end": 1717261251120,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717261251120,
      "end": 1717261251120,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261251120,
      "end": 1717261251120,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717261251120,
      "end": 1717261251120,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1717261251120,
      "end": 1717261251120,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717261251120,
      "end": 1717261251120,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717261251120,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1717261251121,
      "end": 1717261251121,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/forms/Checkbox.vue\";\nimport { default as __nuxt_component_1 } from \"/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/elements/Button.vue\";\nimport { default as __nuxt_component_2 } from \"/media/linux/833cfef0-7984-46f2-8f58-ee0be3a5d0782/DATA/XPS-DATA/DEV/WORKSPACE/PROJECTS/PARTNERSHIPS/IMPERAMAX/OFFERS/nuxt-restaurant-management-system/src/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\n\nimport { computed, defineComponent, toRaw, toRef } from \"vue\";\nimport { upperFirst } from \"scule\";\nimport { defu } from \"defu\";\nimport { useVModel } from \"@vueuse/core\";\nimport UButton from \"../elements/Button.vue\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UCheckbox from \"../forms/Checkbox.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig, get } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { table } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.table, table);\nfunction defaultComparator(a, z) {\n  return a === z;\n}\nfunction defaultSort(a, b, direction) {\n  if (a === b) {\n    return 0;\n  }\n  if (direction === \"asc\") {\n    return a < b ? -1 : 1;\n  } else {\n    return a > b ? -1 : 1;\n  }\n}\nconst _sfc_main = defineComponent({\n  components: {\n    UButton,\n    UIcon,\n    UCheckbox\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: Array,\n      default: null\n    },\n    by: {\n      type: [String, Function],\n      default: () => defaultComparator\n    },\n    rows: {\n      type: Array,\n      default: () => []\n    },\n    columns: {\n      type: Array,\n      default: null\n    },\n    columnAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    sort: {\n      type: Object,\n      default: () => ({})\n    },\n    sortMode: {\n      type: String,\n      default: \"auto\"\n    },\n    sortButton: {\n      type: Object,\n      default: () => config.default.sortButton\n    },\n    sortAscIcon: {\n      type: String,\n      default: () => config.default.sortAscIcon\n    },\n    sortDescIcon: {\n      type: String,\n      default: () => config.default.sortDescIcon\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    loadingState: {\n      type: Object,\n      default: () => config.default.loadingState\n    },\n    emptyState: {\n      type: Object,\n      default: () => config.default.emptyState\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"update:sort\"],\n  setup(props, { emit, attrs: $attrs }) {\n    const { ui, attrs } = useUI(\"table\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const columns = computed(() => props.columns ?? Object.keys(props.rows[0] ?? {}).map((key) => ({ key, label: upperFirst(key), sortable: false, class: void 0, sort: defaultSort })));\n    const sort = useVModel(props, \"sort\", emit, { passive: true, defaultValue: defu({}, props.sort, { column: null, direction: \"asc\" }) });\n    const savedSort = { column: sort.value.column, direction: null };\n    const rows = computed(() => {\n      if (!sort.value?.column || props.sortMode === \"manual\") {\n        return props.rows;\n      }\n      const { column, direction } = sort.value;\n      return props.rows.slice().sort((a, b) => {\n        const aValue = get(a, column);\n        const bValue = get(b, column);\n        const sort2 = columns.value.find((col) => col.key === column)?.sort ?? defaultSort;\n        return sort2(aValue, bValue, direction);\n      });\n    });\n    const selected = computed({\n      get() {\n        return props.modelValue;\n      },\n      set(value) {\n        emit(\"update:modelValue\", value);\n      }\n    });\n    const indeterminate = computed(() => selected.value && selected.value.length > 0 && selected.value.length < props.rows.length);\n    const emptyState = computed(() => {\n      if (props.emptyState === null)\n        return null;\n      return { ...ui.value.default.emptyState, ...props.emptyState };\n    });\n    const loadingState = computed(() => {\n      if (props.loadingState === null)\n        return null;\n      return { ...ui.value.default.loadingState, ...props.loadingState };\n    });\n    function compare(a, z) {\n      if (typeof props.by === \"string\") {\n        const property = props.by;\n        return a?.[property] === z?.[property];\n      }\n      return props.by(a, z);\n    }\n    function isSelected(row) {\n      if (!props.modelValue) {\n        return false;\n      }\n      return selected.value.some((item) => compare(toRaw(item), toRaw(row)));\n    }\n    function onSort(column) {\n      if (sort.value.column === column.key) {\n        const direction = !column.direction || column.direction === \"asc\" ? \"desc\" : \"asc\";\n        if (sort.value.direction === direction) {\n          sort.value = defu({}, savedSort, { column: null, direction: \"asc\" });\n        } else {\n          sort.value = { column: sort.value.column, direction: sort.value.direction === \"asc\" ? \"desc\" : \"asc\" };\n        }\n      } else {\n        sort.value = { column: column.key, direction: column.direction || \"asc\" };\n      }\n    }\n    function onSelect(row) {\n      if (!$attrs.onSelect) {\n        return;\n      }\n      $attrs.onSelect(row);\n    }\n    function selectAllRows() {\n      props.rows.forEach((row) => {\n        if (isSelected(row)) {\n          return;\n        }\n        selected.value.push(row);\n      });\n    }\n    function onChange(event) {\n      if (event.target.checked) {\n        selectAllRows();\n      } else {\n        selected.value = [];\n      }\n    }\n    function getRowData(row, rowKey, defaultValue = \"\") {\n      return get(row, rowKey, defaultValue);\n    }\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      sort,\n      // eslint-disable-next-line vue/no-dupe-keys\n      columns,\n      // eslint-disable-next-line vue/no-dupe-keys\n      rows,\n      selected,\n      indeterminate,\n      // eslint-disable-next-line vue/no-dupe-keys\n      emptyState,\n      // eslint-disable-next-line vue/no-dupe-keys\n      loadingState,\n      isSelected,\n      onSort,\n      onSelect,\n      onChange,\n      getRowData\n    };\n  }\n});\n\nimport { resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, renderSlot as _renderSlot, mergeProps as _mergeProps, createBlock as _createBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withModifiers as _withModifiers, createTextVNode as _createTextVNode } from \"vue\"\n\nconst _hoisted_1 = { key: 1 }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = [\"colspan\"]\nconst _hoisted_4 = { key: 1 }\nconst _hoisted_5 = [\"colspan\"]\nconst _hoisted_6 = [\"onClick\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UCheckbox = __nuxt_component_0\n  const _component_UButton = __nuxt_component_1\n  const _component_UIcon = __nuxt_component_2\n\n  return (_openBlock(), _createElementBlock(\"div\", _mergeProps({\n    class: _ctx.ui.wrapper\n  }, _ctx.attrs), [\n    _createElementVNode(\"table\", {\n      class: _normalizeClass([_ctx.ui.base, _ctx.ui.divide])\n    }, [\n      _createElementVNode(\"thead\", {\n        class: _normalizeClass(_ctx.ui.thead)\n      }, [\n        _createElementVNode(\"tr\", {\n          class: _normalizeClass(_ctx.ui.tr.base)\n        }, [\n          (_ctx.modelValue)\n            ? (_openBlock(), _createElementBlock(\"th\", {\n                key: 0,\n                scope: \"col\",\n                class: _normalizeClass(_ctx.ui.checkbox.padding)\n              }, [\n                _createVNode(_component_UCheckbox, {\n                  checked: _ctx.indeterminate || _ctx.selected.length === _ctx.rows.length,\n                  indeterminate: _ctx.indeterminate,\n                  \"aria-label\": \"Select all\",\n                  onChange: _ctx.onChange\n                }, null, 8, [\"checked\", \"indeterminate\", \"onChange\"])\n              ], 2))\n            : _createCommentVNode(\"\", true),\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.columns, (column, index) => {\n            return (_openBlock(), _createElementBlock(\"th\", {\n              key: index,\n              scope: \"col\",\n              class: _normalizeClass([_ctx.ui.th.base, _ctx.ui.th.padding, _ctx.ui.th.color, _ctx.ui.th.font, _ctx.ui.th.size, column.class])\n            }, [\n              _renderSlot(_ctx.$slots, `${column.key}-header`, {\n                column: column,\n                sort: _ctx.sort,\n                onSort: _ctx.onSort\n              }, () => [\n                (column.sortable)\n                  ? (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: 0 }, { ...(_ctx.ui.default.sortButton || {}), ..._ctx.sortButton }, {\n                      icon: (!_ctx.sort.column || _ctx.sort.column !== column.key) ? (_ctx.sortButton.icon || _ctx.ui.default.sortButton.icon) : _ctx.sort.direction === 'asc' ? _ctx.sortAscIcon : _ctx.sortDescIcon,\n                      label: column[_ctx.columnAttribute],\n                      onClick: $event => (_ctx.onSort(column))\n                    }), null, 16, [\"icon\", \"label\", \"onClick\"]))\n                  : (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString(column[_ctx.columnAttribute]), 1))\n              ])\n            ], 2))\n          }), 128))\n        ], 2)\n      ], 2),\n      _createElementVNode(\"tbody\", {\n        class: _normalizeClass(_ctx.ui.tbody)\n      }, [\n        (_ctx.loadingState && _ctx.loading)\n          ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_2, [\n              _createElementVNode(\"td\", {\n                colspan: _ctx.columns.length + (_ctx.modelValue ? 1 : 0)\n              }, [\n                _renderSlot(_ctx.$slots, \"loading-state\", {}, () => [\n                  _createElementVNode(\"div\", {\n                    class: _normalizeClass(_ctx.ui.loadingState.wrapper)\n                  }, [\n                    (_ctx.loadingState.icon)\n                      ? (_openBlock(), _createBlock(_component_UIcon, {\n                          key: 0,\n                          name: _ctx.loadingState.icon,\n                          class: _normalizeClass(_ctx.ui.loadingState.icon),\n                          \"aria-hidden\": \"true\"\n                        }, null, 8, [\"name\", \"class\"]))\n                      : _createCommentVNode(\"\", true),\n                    _createElementVNode(\"p\", {\n                      class: _normalizeClass(_ctx.ui.loadingState.label)\n                    }, _toDisplayString(_ctx.loadingState.label), 3)\n                  ], 2)\n                ])\n              ], 8, _hoisted_3)\n            ]))\n          : (_ctx.emptyState && !_ctx.rows.length)\n            ? (_openBlock(), _createElementBlock(\"tr\", _hoisted_4, [\n                _createElementVNode(\"td\", {\n                  colspan: _ctx.columns.length + (_ctx.modelValue ? 1 : 0)\n                }, [\n                  _renderSlot(_ctx.$slots, \"empty-state\", {}, () => [\n                    _createElementVNode(\"div\", {\n                      class: _normalizeClass(_ctx.ui.emptyState.wrapper)\n                    }, [\n                      (_ctx.emptyState.icon)\n                        ? (_openBlock(), _createBlock(_component_UIcon, {\n                            key: 0,\n                            name: _ctx.emptyState.icon,\n                            class: _normalizeClass(_ctx.ui.emptyState.icon),\n                            \"aria-hidden\": \"true\"\n                          }, null, 8, [\"name\", \"class\"]))\n                        : _createCommentVNode(\"\", true),\n                      _createElementVNode(\"p\", {\n                        class: _normalizeClass(_ctx.ui.emptyState.label)\n                      }, _toDisplayString(_ctx.emptyState.label), 3)\n                    ], 2)\n                  ])\n                ], 8, _hoisted_5)\n              ]))\n            : (_openBlock(true), _createElementBlock(_Fragment, { key: 2 }, _renderList(_ctx.rows, (row, index) => {\n                return (_openBlock(), _createElementBlock(\"tr\", {\n                  key: index,\n                  class: _normalizeClass([_ctx.ui.tr.base, _ctx.isSelected(row) && _ctx.ui.tr.selected, _ctx.$attrs.onSelect && _ctx.ui.tr.active, row?.class]),\n                  onClick: () => _ctx.onSelect(row)\n                }, [\n                  (_ctx.modelValue)\n                    ? (_openBlock(), _createElementBlock(\"td\", {\n                        key: 0,\n                        class: _normalizeClass(_ctx.ui.checkbox.padding)\n                      }, [\n                        _createVNode(_component_UCheckbox, {\n                          modelValue: _ctx.selected,\n                          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((_ctx.selected) = $event)),\n                          value: row,\n                          \"aria-label\": \"Select row\",\n                          onClick: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"stop\"]))\n                        }, null, 8, [\"modelValue\", \"value\"])\n                      ], 2))\n                    : _createCommentVNode(\"\", true),\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.columns, (column, subIndex) => {\n                    return (_openBlock(), _createElementBlock(\"td\", {\n                      key: subIndex,\n                      class: _normalizeClass([_ctx.ui.td.base, _ctx.ui.td.padding, _ctx.ui.td.color, _ctx.ui.td.font, _ctx.ui.td.size, row[column.key]?.class])\n                    }, [\n                      _renderSlot(_ctx.$slots, `${column.key}-data`, {\n                        column: column,\n                        row: row,\n                        index: index,\n                        getRowData: (defaultValue) => _ctx.getRowData(row, column.key, defaultValue)\n                      }, () => [\n                        _createTextVNode(_toDisplayString(_ctx.getRowData(row, column.key)), 1)\n                      ])\n                    ], 2))\n                  }), 128))\n                ], 10, _hoisted_6))\n              }), 128))\n      ], 2)\n    ], 2)\n  ], 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1717261251121,
      "end": 1717261251122,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717261251122,
      "end": 1717261251122,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717261251122,
      "end": 1717261251122,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717261251122,
      "end": 1717261251122,
      "order": "normal"
    }
  ]
}
