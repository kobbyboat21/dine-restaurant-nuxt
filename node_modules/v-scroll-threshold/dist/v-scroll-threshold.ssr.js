'use strict';Object.defineProperty(exports,'__esModule',{value:true});function isBindingValueValid(bindingValue) {
  if (bindingValue) {
    if (bindingValue.threshold !== undefined) {
      if (bindingValue.callback && typeof bindingValue.callback === 'function') {
        return true;
      }
    }
  }
  return false;
}
function getRelativeScrollPositionToElement(el, elementOffset) {
  var currentScroll = el._scrollElement.scrollY || el._scrollElement.pageYOffset || el._scrollElement.scrollTop || 0;
  var elementScroll = (el.offsetTop || 0) + (elementOffset || 0);
  if (currentScroll === 0 && elementScroll === 0) {
    /**
     * since we can't go past the element at the top,
     * we have to have a way of telling that we have went reached the top but
     * still inside the element and
     * maybe the user need to trigger sth
     */
    return -0;
  }
  return currentScroll - elementScroll;
}
function isMinusZero(value) {
  if (Object.is(value, -0)) return true;
}
function scrollPosition(el, elementOffset) {
  var scrollRelativePos = getRelativeScrollPositionToElement(el, elementOffset);
  if (scrollRelativePos < 0) {
    return -1;
  } else if (scrollRelativePos === 0) {
    // this is for letting -0 through
    return scrollRelativePos;
  } else if (scrollRelativePos >= 0 && scrollRelativePos <= el._scrollThreshold) {
    return 0;
  } else {
    return 1;
  }
}
function isAlongDirection(modifiers, offset) {
  var direction = 'down';
  if (offset > 0) {
    direction = 'up';
  }
  if (modifiers[direction]) {
    return true;
  }
  return false;
}
var evtOpts = {
  passive: true
};
var bind = function bind(el, binding) {
  if (!isBindingValueValid(binding.value)) {
    return;
  }
  el._thresholdCallback = binding.value.callback || function () {};
  el._scrollThreshold = binding.value.threshold || 0;
  el._detectionOffset = binding.value.offset || 0;
  el._scrollBackThreshold = binding.value.scrollBackThreshold || 0;
  el._scrollBackValue = 0;
  el._scrollElement = binding.value.scrollElement || window;
  var startingRelativeScrollPos = scrollPosition(el, el._detectionOffset);
  var lastScrollPos = el._scrollElement.scrollY || el._scrollElement.pageYOffset || el._scrollElement.scrollTop || 0;
  var lastWasAlong = false;
  var scrollHandler = function scrollHandler() {
    var newRelativeScrollPos = scrollPosition(el, el._detectionOffset);
    var newScrollPos = el._scrollElement.scrollY || el._scrollElement.pageYOffset || el._scrollElement.scrollTop || 0;
    var offset = lastScrollPos - newScrollPos;
    lastScrollPos = newScrollPos;
    var newIsAlong = isAlongDirection(binding.modifiers, offset);
    if (newIsAlong) {
      el._scrollBackValue += Math.abs(offset);
    } else {
      el._scrollBackValue = 0;
    }
    var isMinusZ = isMinusZero(newRelativeScrollPos);
    if (el._scrollBackThreshold && newIsAlong && !isMinusZ && el._scrollBackValue < el._scrollBackThreshold) {
      return;
    }
    if (isMinusZ || newRelativeScrollPos !== startingRelativeScrollPos || lastWasAlong !== newIsAlong) {
      startingRelativeScrollPos = newRelativeScrollPos;
      lastWasAlong = newIsAlong;
      el._thresholdCallback(newRelativeScrollPos, newIsAlong);
    }
  };
  el._scrollElement.addEventListener('scroll', scrollHandler, evtOpts);
  el._thresholdCallback(startingRelativeScrollPos, false);
  el._scrollHandler = scrollHandler;
};
var unbind = function unbind(el) {
  if (!el._scrollHandler) return;
  el._scrollElement && el._scrollElement.removeEventListener('scroll', el._scrollHandler, evtOpts);
  delete el._scrollHandler;
  delete el._thresholdCallback;
  delete el._scrollThreshold;
  delete el._scrollBackThreshold;
  delete el._detectionOffset;
  delete el._scrollElement;
};
var update = function update(el, binding) {
  if (typeof binding.value.scrollElement !== 'undefined' && el._scrollElement !== binding.value.scrollElement) {
    unbind(el);
    bind(el, binding);
  } else {
    el._thresholdCallback = binding.value.callback || function () {};
    el._scrollThreshold = binding.value.threshold || 0;
    el._scrollBackThreshold = binding.value.scrollBackThreshold || 0;
    el._detectionOffset = binding.value.offset || 0;
  }
};
var directive = {
  bind: bind,
  beforeMount: bind,
  // vue 3
  unbind: unbind,
  unmounted: unbind,
  // vue 3
  update: update,
  updated: update // vue 3
};var install = function installVScrollThreshold(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.directive('ScrollThreshold', directive);
};
var plugin = {
  install: install
};

// To auto-install when vue is found
// eslint-disable-next-line no-redeclare
/* global window, global */
var GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue && GlobalVue.use) {
  GlobalVue.use(plugin);
}
directive.install = install;exports.default=directive;