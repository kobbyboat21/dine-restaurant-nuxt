'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopDefault(e){return(e&&(typeof e==='object')&&'default'in e)?e['default']:e}var vue=require('vue'),VScrollThreshold=_interopDefault(require('v-scroll-threshold'));function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}function cloneVNode(vnode, createElement) {
  if (vue.cloneVNode) return vue.cloneVNode(vnode, _objectSpread2({}, vnode.props)); // vue 3

  // vue 2 , took from https://stackoverflow.com/questions/51065172/how-can-i-duplicate-slots-within-a-vuejs-render-function
  var clonedChildren = vnode.children && vnode.children.map(function (vnode) {
    return cloneVNode(vnode, createElement);
  });
  var cloned = createElement(vnode.tag, vnode.data, clonedChildren);
  cloned.text = vnode.text;
  cloned.isComment = vnode.isComment;
  cloned.componentOptions = vnode.componentOptions;
  cloned.elm = vnode.elm;
  cloned.context = vnode.context;
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  return cloned;
}
function addDirectiveCompat(vnode, directives) {
  if (typeof vue.withDirectives === 'function') {
    return vue.withDirectives(vnode, directives);
  } else {
    return vnode;
  }
}
function getDirectiveCompat(instance) {
  var value = {
    threshold: instance.directiveThreshold,
    callback: instance.toggleStickiness,
    scrollBackThreshold: instance.scrollBackThreshold,
    scrollElement: instance.scrollElement
  };
  var modifiers = _defineProperty({}, instance.visibleOnDirection, true);
  if (typeof vue.withDirectives === 'function') {
    return [VScrollThreshold, value, '', modifiers];
  } else {
    return {
      name: 'scroll-threshold',
      value: value,
      modifiers: modifiers
    };
  }
}
function isMinusZero(value) {
  if (Object.is(value, -0)) return true;
}
function debounce(func) {
  var _this = this;
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var timer;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timer);
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, timeout);
  };
}
var evtOpts = {
  passive: true
};
var script = {
  directives: {
    'scroll-threshold': VScrollThreshold
  },
  props: {
    visibleOnDirection: {
      type: String,
      default: 'up',
      validator: function validator(val) {
        return ['up', 'down', 'disabled'].includes(val);
      }
    },
    stickMode: {
      type: String,
      default: 'element-end',
      validator: function validator(val) {
        return ['element-end', 'element-start'].includes(val);
      }
    },
    stuckClass: {
      type: String,
      default: 'vue-sticky-element--stuck'
    },
    showClass: {
      type: String,
      default: 'vue-sticky-element--show'
    },
    hideClass: {
      type: String,
      default: 'vue-sticky-element--hide'
    },
    transitionClass: {
      type: String,
      default: 'vue-sticky-element--transition'
    },
    transitionDuration: {
      type: Number,
      default: 50
    },
    /** how much user has to scroll back in the opposite direction before element shows again.
     * this is especially important on mobile devices, when user is holding touch on screen,
     * which causes element to show and hide multiple times in a row.
     *
     * resets on scroll in opposite direction of `visibleOnDirection`
     */
    scrollBackThreshold: {
      type: Number,
      default: 65
    },
    /** When true, stops checking for scroll positions (essentially, does not do anything). this can help when you need to freeze and scroll the navbar. */
    skipChecks: {
      type: Boolean,
      default: false
    },
    /** force applies the show class */
    forceShow: {
      type: Boolean,
      default: false
    },
    /** the scroll element to use for attaching scroll event listeners to. this is mainly added to handle some cases with native applications. */
    scrollElement: {
      type: Object,
      default: undefined
    }
  },
  emits: ['stuck', 'show'],
  data: function data() {
    return {
      navbarStuck: false,
      navbarShow: false,
      applyTransition: false,
      height: undefined,
      forceHide: false,
      observer: undefined,
      lastScrollPos: undefined,
      scrollBackValue: undefined
    };
  },
  computed: {
    alwaysStick: function alwaysStick() {
      return this.visibleOnDirection === 'disabled';
    },
    shouldApplyTransition: function shouldApplyTransition() {
      return !this.alwaysStick;
    },
    stickWithElementStart: function stickWithElementStart() {
      return this.stickMode === 'element-start';
    },
    directiveThreshold: function directiveThreshold() {
      if (this.stickWithElementStart) {
        return 0;
      }
      return this.height || 0;
    }
  },
  mounted: function mounted() {
    var _this2 = this;
    if (typeof this.$root.$on === 'function') {
      this.$root.$on('vse::hide', this.addHide);
      this.$root.$on('vse::show', this.removeHide);
    }
    var fetchHeight = function fetchHeight() {
      _this2.height = (_this2.$el.firstElementChild || _this2.$el).clientHeight;
    };
    if (window && 'ResizeObserver' in window) {
      this.observer = new ResizeObserver(fetchHeight);
      this.observer.observe(this.$el);
    } else if (window) {
      this.observer = debounce(fetchHeight);
      window.addEventListener('resize', this.observer, evtOpts);
    }
    fetchHeight();
  },
  // for vue 3
  beforeUnmount: function beforeUnmount() {
    this.crossBeforeUnmount();
  },
  // for vue 2
  beforeDestroy: function beforeDestroy() {
    this.crossBeforeUnmount();
  },
  methods: {
    addHide: function addHide() {
      this.forceHide = true;
    },
    removeHide: function removeHide() {
      this.forceHide = false;
    },
    toggleStickiness: function toggleStickiness(relativeScrollPosToElement, goingStickyDirection) {
      var _this3 = this;
      if (this.skipChecks) return;
      if (relativeScrollPosToElement < 0 || isMinusZero(relativeScrollPosToElement)) {
        this.navbarStuck = false;
        this.$emit('stuck', false);
        if (this.shouldApplyTransition) {
          this.$nextTick().then(function () {
            _this3.applyTransition = false;
          });
        }
      } else if (relativeScrollPosToElement > 0) {
        this.height = this.$el ? this.$el.clientHeight : this.height;
        this.navbarStuck = true;
        this.$emit('stuck', true);
        if (this.shouldApplyTransition) {
          this.$nextTick().then(function () {
            setTimeout(function () {
              _this3.applyTransition = true;
            }, _this3.transitionDuration);
          });
        }
      }
      if (this.navbarStuck && (goingStickyDirection || this.alwaysStick)) {
        this.navbarShow = true;
        this.$emit('show', true);
      } else {
        this.navbarShow = false;
        this.$emit('show', false);
      }
    },
    crossBeforeUnmount: function crossBeforeUnmount() {
      if (this.observer) {
        if ('disconnect' in this.observer) {
          this.observer.disconnect();
          this.observer = undefined;
        } else {
          window.removeEventListener('resize', this.observer, evtOpts);
        }
      }
    }
  },
  render: function render(h) {
    var _classesToAdd;
    var renderFunction = vue.h ? vue.h : h;
    var children;
    if ('$scopedSlots' in this) {
      children = this.$scopedSlots.default(); // vue 2
    } else if ('$slots' in this) {
      children = this.$slots.default(); // vue 3
    }

    if (!(children && children[0])) {
      return vue.h ? null : h(); // return null on vue 3
    }

    var child = cloneVNode(children[0], renderFunction);
    var classesToAdd = (_classesToAdd = {
      'vue-sticky-element': true
    }, _defineProperty(_classesToAdd, this.stuckClass, this.navbarStuck), _defineProperty(_classesToAdd, this.showClass, this.navbarShow || this.forceShow), _defineProperty(_classesToAdd, this.hideClass, this.forceHide), _defineProperty(_classesToAdd, this.transitionClass, this.applyTransition), _classesToAdd);
    if (child.props) {
      // vue 3
      if (!child.props.class) {
        child.props.class = [];
      } else if (typeof child.props.class === 'string') {
        child.props.class = child.props.class.split(' ');
      }
      if (Array.isArray(child.props.class)) {
        child.props.class = child.props.class.reduce(function (prev, current) {
          prev[current] = true;
          return prev;
        }, {});
      }
      child.props.class = _objectSpread2(_objectSpread2({}, child.props.class), classesToAdd);
      child.props.class = Object.entries(child.props.class).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];
        return v ? k : null;
      }).filter(function (v) {
        return v;
      }).join(' ');
    } else if (child.data) {
      // vue 2

      if (!child.data.class) {
        child.data.class = [];
      } else if (typeof child.data.class === 'string') {
        child.data.class = child.data.class.split(' ');
      }
      if (Array.isArray(child.data.class)) {
        child.data.class = child.data.class.reduce(function (prev, current) {
          prev[current] = true;
          return prev;
        }, {});
      }
      child.data.class = _objectSpread2(_objectSpread2({}, child.data.class), classesToAdd);
      child.data.class = Object.entries(child.data.class).map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          k = _ref4[0],
          v = _ref4[1];
        return v ? k : null;
      }).filter(function (v) {
        return v;
      }).join(' ');
    }
    var style = {};
    var directives = [getDirectiveCompat(this)];
    if (this.height) {
      style.height = "".concat(this.height, "px");
    }
    return addDirectiveCompat(renderFunction('div', _objectSpread2({
      style: style
    }, typeof vue.withDirectives !== 'function' ? {
      directives: directives
    } : {}), [child]), directives);
  }
};function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}function createInjectorSSR(context) {
    if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
    }
    if (!context)
        return () => { };
    if (!('styles' in context)) {
        context._styles = context._styles || {};
        Object.defineProperty(context, 'styles', {
            enumerable: true,
            get: () => context._renderStyles(context._styles)
        });
        context._renderStyles = context._renderStyles || renderStyles;
    }
    return (id, style) => addStyle(id, style, context);
}
function addStyle(id, css, context) {
    const group =  css.media || 'default' ;
    const style = context._styles[group] || (context._styles[group] = { ids: [], css: '' });
    if (!style.ids.includes(id)) {
        style.media = css.media;
        style.ids.push(id);
        let code = css.source;
        style.css += code + '\n';
    }
}
function renderStyles(styles) {
    let css = '';
    for (const key in styles) {
        const style = styles[key];
        css +=
            '<style data-vue-ssr-id="' +
                Array.from(style.ids).join(' ') +
                '"' +
                (style.media ? ' media="' + style.media + '"' : '') +
                '>' +
                style.css +
                '</style>';
    }
    return css;
}/* script */
var __vue_script__ = script;

/* template */

/* style */
var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-4fbcabee_0", {
    source: ".vue-sticky-element{will-change:transform}.vue-sticky-element--transition{transition:transform .1s ease}.vue-sticky-element--stuck{width:100%;position:fixed!important;top:0;transform:translateY(-100%);z-index:10}.vue-sticky-element--show{transform:translateY(0)}.vue-sticky-element--hide{transform:translateY(-100%)!important}",
    map: undefined,
    media: undefined
  });
};
/* scoped */
var __vue_scope_id__ = undefined;
/* module identifier */
var __vue_module_identifier__ = "data-v-4fbcabee";
/* functional template */
var __vue_is_functional_template__ = undefined;
/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, createInjectorSSR, undefined);// Import vue component

// install function executed by Vue.use()
var install = function installVueStickyElement(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.component('VueStickyElement', __vue_component__);
  Vue.use(VScrollThreshold);
};

// Create module definition for Vue.use()
var plugin = {
  install: install
};

// To auto-install when vue is found
// eslint-disable-next-line no-redeclare
/* global window, global */
var GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue && GlobalVue.use) {
  GlobalVue.use(plugin);
}

// Inject install function into component - allows component
// to be registered via Vue.use() as well as Vue.component()
__vue_component__.install = install;

// It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;
exports.default=__vue_component__;