import { h, withDirectives, cloneVNode as cloneVNode$1 } from 'vue';
import VScrollThreshold from 'v-scroll-threshold';

function cloneVNode(vnode, createElement) {
  if (cloneVNode$1) return cloneVNode$1(vnode, {
    ...vnode.props
  }); // vue 3

  // vue 2 , took from https://stackoverflow.com/questions/51065172/how-can-i-duplicate-slots-within-a-vuejs-render-function
  const clonedChildren = vnode.children && vnode.children.map(vnode => cloneVNode(vnode, createElement));
  const cloned = createElement(vnode.tag, vnode.data, clonedChildren);
  cloned.text = vnode.text;
  cloned.isComment = vnode.isComment;
  cloned.componentOptions = vnode.componentOptions;
  cloned.elm = vnode.elm;
  cloned.context = vnode.context;
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  return cloned;
}
function addDirectiveCompat(vnode, directives) {
  if (typeof withDirectives === 'function') {
    return withDirectives(vnode, directives);
  } else {
    return vnode;
  }
}
function getDirectiveCompat(instance) {
  const value = {
    threshold: instance.directiveThreshold,
    callback: instance.toggleStickiness,
    scrollBackThreshold: instance.scrollBackThreshold,
    scrollElement: instance.scrollElement
  };
  const modifiers = {
    [instance.visibleOnDirection]: true
  };
  if (typeof withDirectives === 'function') {
    return [VScrollThreshold, value, '', modifiers];
  } else {
    return {
      name: 'scroll-threshold',
      value,
      modifiers
    };
  }
}
function isMinusZero(value) {
  if (Object.is(value, -0)) return true;
}
function debounce(func) {
  var _this = this;
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  let timer;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(_this, args);
    }, timeout);
  };
}
const evtOpts = {
  passive: true
};
var script = {
  directives: {
    'scroll-threshold': VScrollThreshold
  },
  props: {
    visibleOnDirection: {
      type: String,
      default: 'up',
      validator: val => ['up', 'down', 'disabled'].includes(val)
    },
    stickMode: {
      type: String,
      default: 'element-end',
      validator: val => ['element-end', 'element-start'].includes(val)
    },
    stuckClass: {
      type: String,
      default: 'vue-sticky-element--stuck'
    },
    showClass: {
      type: String,
      default: 'vue-sticky-element--show'
    },
    hideClass: {
      type: String,
      default: 'vue-sticky-element--hide'
    },
    transitionClass: {
      type: String,
      default: 'vue-sticky-element--transition'
    },
    transitionDuration: {
      type: Number,
      default: 50
    },
    /** how much user has to scroll back in the opposite direction before element shows again.
     * this is especially important on mobile devices, when user is holding touch on screen,
     * which causes element to show and hide multiple times in a row.
     *
     * resets on scroll in opposite direction of `visibleOnDirection`
     */
    scrollBackThreshold: {
      type: Number,
      default: 65
    },
    /** When true, stops checking for scroll positions (essentially, does not do anything). this can help when you need to freeze and scroll the navbar. */
    skipChecks: {
      type: Boolean,
      default: false
    },
    /** force applies the show class */
    forceShow: {
      type: Boolean,
      default: false
    },
    /** the scroll element to use for attaching scroll event listeners to. this is mainly added to handle some cases with native applications. */
    scrollElement: {
      type: Object,
      default: undefined
    }
  },
  emits: ['stuck', 'show'],
  data() {
    return {
      navbarStuck: false,
      navbarShow: false,
      applyTransition: false,
      height: undefined,
      forceHide: false,
      observer: undefined,
      lastScrollPos: undefined,
      scrollBackValue: undefined
    };
  },
  computed: {
    alwaysStick() {
      return this.visibleOnDirection === 'disabled';
    },
    shouldApplyTransition() {
      return !this.alwaysStick;
    },
    stickWithElementStart() {
      return this.stickMode === 'element-start';
    },
    directiveThreshold() {
      if (this.stickWithElementStart) {
        return 0;
      }
      return this.height || 0;
    }
  },
  mounted() {
    if (typeof this.$root.$on === 'function') {
      this.$root.$on('vse::hide', this.addHide);
      this.$root.$on('vse::show', this.removeHide);
    }
    const fetchHeight = () => {
      this.height = (this.$el.firstElementChild || this.$el).clientHeight;
    };
    if (window && 'ResizeObserver' in window) {
      this.observer = new ResizeObserver(fetchHeight);
      this.observer.observe(this.$el);
    } else if (window) {
      this.observer = debounce(fetchHeight);
      window.addEventListener('resize', this.observer, evtOpts);
    }
    fetchHeight();
  },
  // for vue 3
  beforeUnmount() {
    this.crossBeforeUnmount();
  },
  // for vue 2
  beforeDestroy() {
    this.crossBeforeUnmount();
  },
  methods: {
    addHide() {
      this.forceHide = true;
    },
    removeHide() {
      this.forceHide = false;
    },
    toggleStickiness(relativeScrollPosToElement, goingStickyDirection) {
      if (this.skipChecks) return;
      if (relativeScrollPosToElement < 0 || isMinusZero(relativeScrollPosToElement)) {
        this.navbarStuck = false;
        this.$emit('stuck', false);
        if (this.shouldApplyTransition) {
          this.$nextTick().then(() => {
            this.applyTransition = false;
          });
        }
      } else if (relativeScrollPosToElement > 0) {
        this.height = this.$el ? this.$el.clientHeight : this.height;
        this.navbarStuck = true;
        this.$emit('stuck', true);
        if (this.shouldApplyTransition) {
          this.$nextTick().then(() => {
            setTimeout(() => {
              this.applyTransition = true;
            }, this.transitionDuration);
          });
        }
      }
      if (this.navbarStuck && (goingStickyDirection || this.alwaysStick)) {
        this.navbarShow = true;
        this.$emit('show', true);
      } else {
        this.navbarShow = false;
        this.$emit('show', false);
      }
    },
    crossBeforeUnmount() {
      if (this.observer) {
        if ('disconnect' in this.observer) {
          this.observer.disconnect();
          this.observer = undefined;
        } else {
          window.removeEventListener('resize', this.observer, evtOpts);
        }
      }
    }
  },
  render(h$1) {
    const renderFunction = h ? h : h$1;
    let children;
    if ('$scopedSlots' in this) {
      children = this.$scopedSlots.default(); // vue 2
    } else if ('$slots' in this) {
      children = this.$slots.default(); // vue 3
    }

    if (!(children && children[0])) {
      return h ? null : h$1(); // return null on vue 3
    }

    const child = cloneVNode(children[0], renderFunction);
    const classesToAdd = {
      'vue-sticky-element': true,
      [this.stuckClass]: this.navbarStuck,
      [this.showClass]: this.navbarShow || this.forceShow,
      [this.hideClass]: this.forceHide,
      [this.transitionClass]: this.applyTransition
    };
    if (child.props) {
      // vue 3
      if (!child.props.class) {
        child.props.class = [];
      } else if (typeof child.props.class === 'string') {
        child.props.class = child.props.class.split(' ');
      }
      if (Array.isArray(child.props.class)) {
        child.props.class = child.props.class.reduce((prev, current) => {
          prev[current] = true;
          return prev;
        }, {});
      }
      child.props.class = {
        ...child.props.class,
        ...classesToAdd
      };
      child.props.class = Object.entries(child.props.class).map(_ref => {
        let [k, v] = _ref;
        return v ? k : null;
      }).filter(v => v).join(' ');
    } else if (child.data) {
      // vue 2

      if (!child.data.class) {
        child.data.class = [];
      } else if (typeof child.data.class === 'string') {
        child.data.class = child.data.class.split(' ');
      }
      if (Array.isArray(child.data.class)) {
        child.data.class = child.data.class.reduce((prev, current) => {
          prev[current] = true;
          return prev;
        }, {});
      }
      child.data.class = {
        ...child.data.class,
        ...classesToAdd
      };
      child.data.class = Object.entries(child.data.class).map(_ref2 => {
        let [k, v] = _ref2;
        return v ? k : null;
      }).filter(v => v).join(' ');
    }
    const style = {};
    const directives = [getDirectiveCompat(this)];
    if (this.height) {
      style.height = `${this.height}px`;
    }
    return addDirectiveCompat(renderFunction('div', {
      style,
      ...(typeof withDirectives !== 'function' ? {
        directives
      } : {})
    }, [child]), directives);
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
const __vue_script__ = script;

/* template */

/* style */
const __vue_inject_styles__ = function (inject) {
  if (!inject) return;
  inject("data-v-4fbcabee_0", {
    source: ".vue-sticky-element{will-change:transform}.vue-sticky-element--transition{transition:transform .1s ease}.vue-sticky-element--stuck{width:100%;position:fixed!important;top:0;transform:translateY(-100%);z-index:10}.vue-sticky-element--show{transform:translateY(0)}.vue-sticky-element--hide{transform:translateY(-100%)!important}",
    map: undefined,
    media: undefined
  });
};
/* scoped */
const __vue_scope_id__ = undefined;
/* module identifier */
const __vue_module_identifier__ = undefined;
/* functional template */
const __vue_is_functional_template__ = undefined;
/* style inject SSR */

/* style inject shadow dom */

const __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, undefined, undefined);

// Import vue component

// install function executed by Vue.use()
const install = function installVueStickyElement(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.component('VueStickyElement', __vue_component__);
  Vue.use(VScrollThreshold);
};

// Create module definition for Vue.use()
const plugin = {
  install
};

// To auto-install when vue is found
// eslint-disable-next-line no-redeclare
/* global window, global */
let GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue && GlobalVue.use) {
  GlobalVue.use(plugin);
}

// Inject install function into component - allows component
// to be registered via Vue.use() as well as Vue.component()
__vue_component__.install = install;

// It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;

export default __vue_component__;
