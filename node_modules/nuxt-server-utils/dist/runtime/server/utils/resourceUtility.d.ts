/// <reference types="mongoose/types/aggregate" />
/// <reference types="mongoose/types/callback" />
/// <reference types="mongoose/types/collection" />
/// <reference types="mongoose/types/connection" />
/// <reference types="mongoose/types/cursor" />
/// <reference types="mongoose/types/document" />
/// <reference types="mongoose/types/error" />
/// <reference types="mongoose/types/expressions" />
/// <reference types="mongoose/types/helpers" />
/// <reference types="mongoose/types/middlewares" />
/// <reference types="mongoose/types/indexes" />
/// <reference types="mongoose/types/models" />
/// <reference types="mongoose/types/mongooseoptions" />
/// <reference types="mongoose/types/pipelinestage" />
/// <reference types="mongoose/types/populate" />
/// <reference types="mongoose/types/query" />
/// <reference types="mongoose/types/schemaoptions" />
/// <reference types="mongoose/types/schematypes" />
/// <reference types="mongoose/types/session" />
/// <reference types="mongoose/types/types" />
/// <reference types="mongoose/types/utility" />
/// <reference types="mongoose/types/validation" />
/// <reference types="mongoose/types/virtuals" />
/// <reference types="mongoose/types/inferschematype" />
import { H3Event, EventHandler } from "h3";
import { Model, PopulateOptions } from "mongoose";
export interface indexRecourceHelperOptions<T> {
    model: Model<T>;
    related?: PopulateOptions[] | ((event: H3Event) => PopulateOptions[]);
    beforeFnHook?: (event: H3Event) => void;
    afterFnHook?: (event: H3Event, response: {
        totalPage: number;
        totalRecords: number;
        records: T[];
    }) => void;
}
/**
 * @deprecated since version 0.0.6
 * REST API helper function to get all documents from a collection
 * @template T - The type of data being indexed.
 * @param {indexRecourceHelperOptions<T>} options - Options for indexing.
 * @param {Model<T>} options.model - The model used for indexing.
 * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
 * @param {(event: H3Event) => void} [options.beforeFnHook] - Hook function to be executed before indexing.
 * @param {(event: H3Event, response: { totalPage: number; totalRecords: number; records: T[] }) => void} [options.afterFnHook] - Hook function to be executed after indexing, receives the event and the indexing response.
 * @returns void
 */
export declare const indexRecourceHelper: <T>(options: indexRecourceHelperOptions<T>) => (event: H3Event) => Promise<{
    totalPage: number;
    totalRecords: any;
    records: any;
}>;
export interface ShowResourceHelperOptions<T> {
    model: Model<T>;
    related?: PopulateOptions[] | ((event: H3Event) => PopulateOptions[]);
}
/**
 * @deprecated since version 0.0.6
 * REST API helper function to get a single document from a collection
 * @template T - The type of data being shown.
 * @param {ShowResourceHelperOptions<T>} options - Options for showing.
 * @param {Model<T>} options.model - The model used for showing.
 * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
 * @returns void
 * @throws {Error} If no document is found
 * @throws {Error} If the id is not a valid ObjectId
 * @throws {Error} If the id is not found
 * @example
showResourceHelper({
model: UserModel
});
*/
export declare const showResourceHelper: <T>(options: ShowResourceHelperOptions<T>) => (event: H3Event) => Promise<void | import("mongoose").IfAny<T, any, import("mongoose").Document<unknown, {}, T> & Omit<import("mongoose").Require_id<T>, never>>>;
type Integrity = {
    model: Model<any>;
    localField?: string;
    foreignField: string;
};
interface DeleteResourceHelperOptions<T> {
    model: Model<T>;
    intigrity?: Integrity[];
    checkSelf?: boolean;
    afterFnHook?: (event: H3Event, resource?: T) => Promise<void>;
}
/**
 * @deprecated since version 0.0.6
 * REST API helper function to get a single document from a collection
 * @template T - The type of data being deleted.
 * @param {DeleteResourceHelperOptions<T>} options - Options for deleting.
 * @param {Model<T>} options.model - The model used for deleting.
 * @param {Integrity[]} [options.intigrity] - Related collections to check for relations before deleting.
 * @param {boolean} [options.checkSelf] - Check if the id is the logged in user.
 * @param {(event: H3Event, resource?: T) => Promise<void>} [options.cb] - Callback function to run after deleting the resource.
 * @returns void
 * @throws {Error} If the id is not a valid ObjectId
 * @throws {Error} If the id is not found
 * @example
 * deleteResourceHelper({
 * model: UserModel
 * });
 */
export declare const deleteResourceHelper: <T>(options: DeleteResourceHelperOptions<T>) => EventHandler;
export {};
