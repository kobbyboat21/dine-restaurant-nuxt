import {
  getRouterParam,
  sendError,
  createError,
  getQuery
} from "h3";
import { APIFeatures } from "./apiFeatures.mjs";
class ResourceHelper {
  /**
   * REST API helper function to get all documents from a collection
   * @template T - The type of data being indexed.
   * @param {indexRecourceHelperOptions<T>} options - Options for indexing.
   * @param {Model<T>} options.model - The model used for indexing.
   * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
   * @param {(event: H3Event) => void} [options.beforeFnHook] - Hook function to be executed before indexing.
   * @param {(event: H3Event, response: { totalPage: number; totalRecords: number; records: T[] }) => void} [options.afterFnHook] - Hook function to be executed after indexing, receives the event and the indexing response.
   * @returns EventHandler
   */
  index(options) {
    return async (event) => {
      const { model, related, beforeFnHook, afterFnHook } = options;
      if (beforeFnHook) {
        beforeFnHook(event);
      }
      const extraQuery = event.context.extraQuery || {};
      const query = getQuery(event);
      if (!query.limit) {
        query.limit = 10;
      }
      const mongoQuery = model.find(extraQuery);
      if (related) {
        if (typeof related === "function") {
          mongoQuery.populate(related(event));
        } else {
          related.forEach((relation) => {
            mongoQuery.populate(relation);
          });
        }
      }
      const apiFeature = new APIFeatures(mongoQuery, query);
      apiFeature.filter().sort().limitFields().paginate().search();
      const records = await apiFeature.query;
      const recordsCount = new APIFeatures(model.find(extraQuery), query).filter().search();
      const count = await recordsCount.query.countDocuments();
      if (afterFnHook) {
        afterFnHook(event, {
          totalPage: Math.ceil(count / query.limit),
          totalRecords: count,
          records
        });
      }
      return {
        totalPage: Math.ceil(count / query.limit),
        totalRecords: count,
        records
      };
    };
  }
  /**
   * REST API helper function to get a single document from a collection
   * @template T - The type of data being shown.
   * @param {ShowResourceHelperOptions<T>} options - Options for showing.
   * @param {Model<T>} options.model - The model used for showing.
   * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
   * @returns EventHandler
   * @throws {Error} If no document is found
   * @throws {Error} If the id is not a valid ObjectId
   * @throws {Error} If the id is not found
   * @example
  showResourceHelper({
  model: UserModel
  });
  */
  show(options) {
    return async (event) => {
      const { model, related } = options;
      const id = getRouterParam(event, "id");
      const mongoQuery = model.findById(id);
      if (related) {
        if (typeof related === "function") {
          mongoQuery.populate(related(event));
        } else {
          related.forEach((relation) => {
            mongoQuery.populate(relation);
          });
        }
      }
      const resource = await mongoQuery;
      if (!resource) {
        return sendError(
          event,
          createError({
            statusCode: 404,
            statusMessage: "Not Found",
            data: {
              message: `No ${model.collection.name} found with id: ${id}`
            }
          })
        );
      }
      return resource;
    };
  }
  /**
   * REST API helper function to get a single document from a collection
   * @template T - The type of data being deleted.
   * @param {DeleteResourceHelperOptions<T>} options - Options for deleting.
   * @param {Model<T>} options.model - The model used for deleting.
   * @param {Integrity[]} [options.intigrity] - Related collections to check for relations before deleting.
   * @param {boolean} [options.checkSelf] - Check if the id is the logged in user.
   * @param {(event: H3Event, resource?: T) => Promise<void>} [options.cb] - Callback function to run after deleting the resource.
   * @returns EventHandler
   * @throws {Error} If the id is not a valid ObjectId
   * @throws {Error} If the id is not found
   * @example
   * deleteResourceHelper({
   * model: UserModel
   * });
   */
  destroy(options) {
    return async (event) => {
      const { model, intigrity, checkSelf, afterFnHook } = options;
      const id = getRouterParam(event, "id");
      if (checkSelf) {
        if (event.context.auth.user.id === id) {
          return sendError(
            event,
            createError({
              statusCode: 400,
              statusMessage: "Bad Request",
              data: {
                message: "You cannot delete yourself"
              }
            })
          );
        }
      }
      if (intigrity) {
        for (const relation of intigrity) {
          const record = await relation.model.findOne({
            [relation.foreignField]: id
          });
          if (record) {
            return sendError(
              event,
              createError({
                statusCode: 400,
                statusMessage: "Bad Request",
                data: {
                  message: `This ${model.collection.name} is related to ${relation.model.collection.name}`
                }
              })
            );
          }
        }
      }
      const resource = await model.findByIdAndDelete(id);
      if (!resource) {
        return sendError(
          event,
          createError({
            statusCode: 404,
            statusMessage: "Not Found",
            data: {
              message: `No ${model.collection.name} found with id: ${id}`
            }
          })
        );
      }
      if (afterFnHook) {
        await afterFnHook(event, resource);
      }
      event.node.res.statusCode = 204;
      return {};
    };
  }
}
export default new ResourceHelper();
