import { H3Event, EventHandler } from "h3";
import { Model, PopulateOptions } from "mongoose";
export interface indexRecourceHelperOptions<T> {
    model: Model<T>;
    related?: PopulateOptions[] | ((event: H3Event) => PopulateOptions[]);
    beforeFnHook?: (event: H3Event) => void;
    afterFnHook?: (event: H3Event, response: {
        totalPage: number;
        totalRecords: number;
        records: T[];
    }) => void;
}
export interface ShowResourceHelperOptions<T> {
    model: Model<T>;
    related?: PopulateOptions[] | ((event: H3Event) => PopulateOptions[]);
}
type Integrity = {
    model: Model<any>;
    localField?: string;
    foreignField: string;
};
interface DeleteResourceHelperOptions<T> {
    model: Model<T>;
    intigrity?: Integrity[];
    checkSelf?: boolean;
    afterFnHook?: (event: H3Event, resource?: T) => Promise<void>;
}
declare class ResourceHelper {
    /**
     * REST API helper function to get all documents from a collection
     * @template T - The type of data being indexed.
     * @param {indexRecourceHelperOptions<T>} options - Options for indexing.
     * @param {Model<T>} options.model - The model used for indexing.
     * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
     * @param {(event: H3Event) => void} [options.beforeFnHook] - Hook function to be executed before indexing.
     * @param {(event: H3Event, response: { totalPage: number; totalRecords: number; records: T[] }) => void} [options.afterFnHook] - Hook function to be executed after indexing, receives the event and the indexing response.
     * @returns EventHandler
     */
    index<T>(options: indexRecourceHelperOptions<T>): EventHandler;
    /**
   * REST API helper function to get a single document from a collection
   * @template T - The type of data being shown.
   * @param {ShowResourceHelperOptions<T>} options - Options for showing.
   * @param {Model<T>} options.model - The model used for showing.
   * @param {PopulateOptions[] | ((event: H3Event) => PopulateOptions[])} [options.related] - Options for populating related data or a function that returns options based on an event.
   * @returns EventHandler
   * @throws {Error} If no document is found
   * @throws {Error} If the id is not a valid ObjectId
   * @throws {Error} If the id is not found
   * @example
  showResourceHelper({
  model: UserModel
  });
  */
    show<T>(options: ShowResourceHelperOptions<T>): EventHandler;
    /**
     * REST API helper function to get a single document from a collection
     * @template T - The type of data being deleted.
     * @param {DeleteResourceHelperOptions<T>} options - Options for deleting.
     * @param {Model<T>} options.model - The model used for deleting.
     * @param {Integrity[]} [options.intigrity] - Related collections to check for relations before deleting.
     * @param {boolean} [options.checkSelf] - Check if the id is the logged in user.
     * @param {(event: H3Event, resource?: T) => Promise<void>} [options.cb] - Callback function to run after deleting the resource.
     * @returns EventHandler
     * @throws {Error} If the id is not a valid ObjectId
     * @throws {Error} If the id is not found
     * @example
     * deleteResourceHelper({
     * model: UserModel
     * });
     */
    destroy<T>(options: DeleteResourceHelperOptions<T>): EventHandler;
}
declare const _default: ResourceHelper;
export default _default;
