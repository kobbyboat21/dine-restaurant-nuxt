import { defineNuxtModule, createResolver, addTemplate, addServerPlugin } from '@nuxt/kit';

function isObject(value) {
  return value !== null && typeof value === "object";
}
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isObject(value) && isObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
const defu = createDefu();

const DOCUMENTATION_URL = "https://nuxt-server-utils.jahid.dev/";
const module = defineNuxtModule({
  meta: {
    name: "nuxt-server-utils",
    configKey: "nuxtServerUtils"
  },
  // Default configuration options of the Nuxt module
  defaults: {
    enabled: true,
    mongodbUri: process.env.MONGODB_URI || void 0,
    enableDevTools: true
  },
  setup(options, nuxt) {
    if (!options.enabled) {
      return;
    }
    const resolver = createResolver(import.meta.url);
    const runtimeConfig = nuxt.options.runtimeConfig;
    runtimeConfig.nuxtServerUtils = defu(runtimeConfig.nuxtServerUtils || {}, {
      mongodbUri: options.mongodbUri
    });
    nuxt.hook("nitro:config", (nitroConfig) => {
      nitroConfig.alias = nitroConfig.alias || {};
      nitroConfig.externals = defu(
        typeof nitroConfig.externals === "object" ? nitroConfig.externals : {},
        {
          inline: [resolver.resolve("./runtime")]
        }
      );
      nitroConfig.alias["#nuxt-server-utils"] = resolver.resolve(
        "./runtime/server/utils"
      );
    });
    addTemplate({
      filename: "./types/nuxt-server-utils.d.ts",
      getContents: () => `declare module "#nuxt-server-utils" {
        const APIFeatures: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").APIFeatures;
        const allows: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").allows;
        const validateSchema: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").validateSchema;
        const indexRecourceHelper: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").indexRecourceHelper;
        const showResourceHelper: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").showResourceHelper;
        const deleteResourceHelper: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").deleteResourceHelper;

        const Validator: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").Validator;

        const Authorizer: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").Authorizer;

        const ResourceHelper: typeof import("${resolver.resolve(
        "./runtime/server/utils"
      )}").ResourceHelper;

      }`
    });
    nuxt.hook("prepare:types", (options2) => {
      options2.references.push({
        path: resolver.resolve(
          nuxt.options.buildDir,
          "types/nuxt-server-utils.d.ts"
        )
      });
    });
    if (options.mongodbUri) {
      addServerPlugin(resolver.resolve("./runtime/server/plugins/mongoose"));
    }
    if (options.enableDevTools) {
      nuxt.hook("devtools:customTabs", (iframeTabs) => {
        iframeTabs.push({
          name: "nuxr-server-utils",
          title: "Nuxt Server Utils",
          icon: "solar:settings-minimalistic-bold-duotone",
          view: {
            type: "iframe",
            src: DOCUMENTATION_URL
          }
        });
      });
    }
  }
});

export { module as default };
